{"version":3,"file":"js/596.js","mappings":"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","sources":["webpack://chronicle/./src/components/Syntax.vue","webpack://chronicle/./src/components/Syntax.vue?60de","webpack://chronicle/./src/components/Syntax.vue?17cd","webpack://chronicle/./src/components/Syntax.vue?e9ff","webpack://chronicle/./src/views/applets/MazeGenerator.vue","webpack://chronicle/./src/views/applets/MazeGenerator/MazeGenerator.ts","webpack://chronicle/./src/views/applets/MazeGenerator.vue?6df0","webpack://chronicle/./src/views/applets/MazeGenerator.vue?8503","webpack://chronicle/./src/views/applets/MazeGenerator.vue?28fc"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"syntax\",class:{ popup: _vm.popup, closing: _vm.closing },on:{\"click\":function($event){if($event.target !== $event.currentTarget)return null;return _vm.$emit('close')},\"mouseover\":function($event){if($event.target !== $event.currentTarget)return null;_vm.closing = true},\"mouseout\":function($event){if($event.target !== $event.currentTarget)return null;_vm.closing = false}}},[_c('div',{staticClass:\"content\"},[(_vm.popup)?_c('div',{staticClass:\"popup-controls\"},[_c('button',{staticClass:\"download\",on:{\"click\":function($event){return _vm.download_as_file(_vm.file_name, _vm.text_content)}}},[_vm._v(\"download\")]),_c('button',{staticClass:\"copy\",class:{ copied_tooltip: _vm.copied_tooltip },on:{\"click\":function($event){_vm.copy_to_clipboard(_vm.text_content); _vm.show_copied_tooltip()}}},[_vm._v(\"copy\")]),_c('button',{staticClass:\"close\",class:{ closing: _vm.closing },on:{\"click\":function($event){return _vm.$emit('close')},\"mouseover\":function($event){if($event.target !== $event.currentTarget)return null;_vm.closing = true},\"mouseout\":function($event){if($event.target !== $event.currentTarget)return null;_vm.closing = false}}},[_vm._v(\"close\")])]):_vm._e(),_c('pre',{directives:[{name:\"highlightjs\",rawName:\"v-highlightjs\",value:(_vm.text_content),expression:\"text_content\"}]},[_c('code',{staticClass:\"javascript\"})])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\n\r\nimport mixins from 'vue-typed-mixins';\r\nimport BaseComponent from './BaseComponent.vue';\r\nimport { isString } from 'lodash';\r\nimport { read_text_file } from '@/tools';\r\n\r\n\r\nexport default mixins(BaseComponent).extend({\r\n    name: 'Syntax',\r\n    data() {\r\n        return {\r\n            copied_tooltip: false,\r\n            closing: false,\r\n            text_content: \"\",\r\n            file_name: \"unknown\"\r\n        }\r\n    },\r\n    props: {\r\n        code: {\r\n            type: [String, Object],\r\n            required: true,\r\n            default() {\r\n                return `const example = \"Hello, PrismJS!\";`\r\n            }\r\n        },\r\n        file: {\r\n            type: String,\r\n            default: null\r\n        },\r\n        popup: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        download_name: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    mounted() {\r\n        this.update()\r\n    },\r\n    watch: {\r\n        code() {\r\n            this.update()\r\n        },\r\n        file() {\r\n            this.update()\r\n        }\r\n    },\r\n    methods: {\r\n        async update() {\r\n            if (this.file) {\r\n                this.text_content = await read_text_file(this.file);\r\n                this.file_name = this.download_name.length ? this.download_name : this.file.split(\"/\").pop();\r\n                console.log(\"update\", this.file, this.text_content)\r\n            } else {\r\n                if (isString(this.code)) {\r\n                    this.text_content = this.code;\r\n                } else {\r\n                    this.text_content = JSON.stringify(this.code, null, 4);\r\n                }\r\n\r\n                this.file_name = this.download_name;\r\n            }\r\n        },\r\n        show_copied_tooltip() {\r\n            this.copied_tooltip = true;\r\n            setTimeout(() => {\r\n                this.copied_tooltip = false;\r\n            }, 1000);\r\n        },\r\n        download_as_file(filename, text) {\r\n            var element = document.createElement('a');\r\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n            element.setAttribute('download', filename);\r\n\r\n            element.style.display = 'none';\r\n            document.body.appendChild(element);\r\n\r\n            element.click();\r\n\r\n            document.body.removeChild(element);\r\n        }\r\n    }\r\n});\r\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Syntax.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./Syntax.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./Syntax.vue?vue&type=template&id=2762d7b2&\"\nimport script from \"./Syntax.vue?vue&type=script&lang=ts&\"\nexport * from \"./Syntax.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./Syntax.vue?vue&type=style&index=0&id=2762d7b2&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"maze-generator\"},[_c('div',{staticClass:\"control-panel\"},[_c('Tweakpane',{ref:\"tweakpane\"}),_vm._m(0)],1),_c('Canvas2D',{ref:\"canvas\",attrs:{\"show_debug\":!_vm.is_mobile,\"allow_user_scale\":true,\"allow_user_translate\":true,\"allow_context_menu\":true},on:{\"update\":_vm.render}}),(_vm.show_json_data_popup)?_c('Syntax',{attrs:{\"code\":_vm.json_data,\"popup\":true,\"download_name\":`maze_${_vm.maze_generator.seed}.json`},on:{\"close\":function($event){_vm.show_json_data_popup = false}}}):_vm._e()],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('ul',{staticClass:\"info\"},[_c('li',[_vm._v(\"Use \"),_c('i',[_vm._v(\"Space\")]),_vm._v(\" to reset user transformations\")])])\n}]\n\nexport { render, staticRenderFns }","\r\nimport { filter, flatten, isUndefined, map } from 'lodash';\r\nimport Alea from 'alea'\r\n\r\nexport enum ECellCategory {\r\n    Empty,\r\n    Default,\r\n    Shortcut,\r\n    Loop,\r\n    Start,\r\n    End,\r\n}\r\n\r\nexport enum ECellAccessibilityLevel {\r\n    Crossroad,\r\n    Fork,\r\n    Transitive,\r\n    DeadEnd,\r\n    Isolated,\r\n}\r\n\r\nexport enum EGenerationOrder {\r\n    Pop,\r\n    Shift\r\n}\r\n\r\nexport class MazeCell {\r\n    constructor(maze_generator: MazeGenerator, x: number, y: number, category: ECellCategory = ECellCategory.Default) {\r\n        this.maze_generator = maze_generator;\r\n        this.walls = { north: true, east: true, south: true, west: true }\r\n        this.x = x;\r\n        this.y = y;\r\n        this.visited = false;\r\n        this.category = category;\r\n    }\r\n\r\n    // PROPS\r\n\r\n    public index: number\r\n    public distance?: number;\r\n    public x: number;\r\n    public y: number;\r\n    public walls: { north: boolean, east: boolean, south: boolean, west: boolean } = null;\r\n    public category: ECellCategory;\r\n    public visited: boolean;\r\n    public route: number;\r\n\r\n    protected maze_generator?: MazeGenerator;\r\n    protected neighbours_offsets = [\r\n        { x: -1, y: 0 },\r\n        { x: 0, y: -1 },\r\n        { x: 1, y: 0 },\r\n        { x: 0, y: 1 },\r\n    ]\r\n\r\n    public get walls_count(): number {\r\n        let result = 0;\r\n        if (this.walls.north) result++;\r\n        if (this.walls.east) result++;\r\n        if (this.walls.south) result++;\r\n        if (this.walls.west) result++;\r\n        return result;\r\n    }\r\n\r\n    // METHODS\r\n    public get_closed_neighbours(): MazeCell[] {\r\n        return filter(this.get_all_neighbours(), (cell: MazeCell) => {\r\n            return this.get_wall_between(cell) && cell.walls_count !== ECellAccessibilityLevel.Isolated\r\n        })\r\n    }\r\n    public get_open_neighbours(): MazeCell[] {\r\n        return filter(this.get_all_neighbours(), (cell) => {\r\n            return !this.get_wall_between(cell)\r\n        })\r\n    }\r\n    public get_all_neighbours(): MazeCell[] {\r\n        let cells = this.maze_generator.cells;\r\n        return filter(\r\n            map(this.neighbours_offsets, (offset, index) => { return this.get_neighbour_cell(index) }),\r\n            (cell) => { return cell !== null }\r\n        )\r\n    }\r\n    public remove_wall_between(cell2: MazeCell): void {\r\n        this.set_wall_between(cell2, false);\r\n    }\r\n    public add_wall_between(cell2: MazeCell): void {\r\n        this.set_wall_between(cell2, true);\r\n    }\r\n    public set_wall_between(cell2: MazeCell, value: boolean): void {\r\n        let cell1 = this\r\n        let x = cell1.x - cell2.x;\r\n        let y = cell1.y - cell2.y;\r\n\r\n        if (x === 1) {\r\n            cell1.walls.west = value;\r\n            cell2.walls.east = value;\r\n        } else if (x === -1) {\r\n            cell1.walls.east = value;\r\n            cell2.walls.west = value;\r\n        }\r\n\r\n        if (y === 1) {\r\n            cell1.walls.north = value;\r\n            cell2.walls.south = value;\r\n        } else if (y === -1) {\r\n            cell1.walls.south = value;\r\n            cell2.walls.north = value;\r\n        }\r\n    }\r\n    public get_wall_between(cell2: MazeCell): boolean {\r\n        let x = this.x - cell2.x;\r\n        let y = this.y - cell2.y;\r\n\r\n        if (x === 1) {\r\n            return this.walls.west;\r\n        } else if (x === -1) {\r\n            return this.walls.east;\r\n        }\r\n\r\n        if (y === 1) {\r\n            return this.walls.north;\r\n        } else if (y === -1) {\r\n            return this.walls.south;\r\n        }\r\n    }\r\n    protected get_neighbour_cell(offset: number) {\r\n        if (offset < 0 || offset > 3) {\r\n            throw new Error(\"offset must be between 0 and 3\");\r\n        }\r\n        let x = this.x + this.neighbours_offsets[offset].x\r\n        let y = this.y + this.neighbours_offsets[offset].y\r\n\r\n        if (x < 0 || x >= this.maze_generator.grid_size || y < 0 || y >= this.maze_generator.grid_size) {\r\n            return null\r\n        }\r\n\r\n        return this.maze_generator.cells[x][y]\r\n    }\r\n}\r\n\r\nexport class MazeGenerator {\r\n    constructor() {\r\n        this.cells = []\r\n    }\r\n\r\n    //  PROPS\r\n    public cells: MazeCell[][]\r\n    public start_cell: MazeCell\r\n    public end_cell: MazeCell\r\n\r\n    public seed: number = 0\r\n    public grid_size: number = 4\r\n    public sparseness: number = 0.5\r\n    public dead_ends_ratio: number = 0.75\r\n    public shortcuts_ratio: number = 0.2\r\n    public generation_order: EGenerationOrder = EGenerationOrder.Shift\r\n\r\n    protected current_cell_index: number = 0\r\n    protected seeded_random;\r\n    public routes: MazeCell[][] = []\r\n\r\n    public get max_cells_count() {\r\n        return this.grid_size * this.grid_size;\r\n    }\r\n\r\n    // METHODS\r\n    protected update_generator() {\r\n        this.seeded_random = Alea(this.seed.toString())\r\n    }\r\n    protected get_random_cell(): MazeCell {\r\n        return this.cells[Math.floor(this.seeded_random() * this.grid_size)][Math.floor(this.seeded_random() * this.grid_size)];\r\n    }\r\n    protected initialize() {\r\n        this.update_generator();\r\n        this.current_cell_index = 0;\r\n        this.cells = [];\r\n        this.routes = [];\r\n\r\n        for (let x = 0; x < this.grid_size; x++) {\r\n            this.cells[x] = [];\r\n            for (let y = 0; y < this.grid_size; y++) {\r\n                this.cells[x][y] = new MazeCell(this, x, y, ECellCategory.Default)\r\n            }\r\n        }\r\n    }\r\n    public generate() {\r\n        this.initialize();\r\n\r\n        let stack = [];\r\n        let current_cell = this.start_cell = this.get_random_cell();\r\n        let end_cell: MazeCell = current_cell;\r\n        current_cell.distance = 0;\r\n        current_cell.index = this.current_cell_index;\r\n        current_cell.visited = true;\r\n        current_cell.category = ECellCategory.Start;\r\n        stack.push(current_cell);\r\n\r\n        let route = []\r\n\r\n        while (stack.length > 0) {\r\n            route.push(current_cell);\r\n\r\n            if (current_cell.index >= Math.max(1, (1 - this.sparseness) * this.max_cells_count)) {\r\n                if (route.length > 1) {\r\n                    this.routes.push(route);\r\n                }\r\n                route = []\r\n                break;\r\n            }\r\n\r\n            let neighbours = current_cell.get_all_neighbours();\r\n            let unvisited_neighbours = neighbours.filter(cell => cell.visited === false);\r\n\r\n            if (unvisited_neighbours.length > 0) {\r\n                let random_neighbour = unvisited_neighbours[Math.floor(this.seeded_random() * unvisited_neighbours.length)];\r\n                current_cell.remove_wall_between(random_neighbour);\r\n                random_neighbour.visited = true;\r\n                random_neighbour.distance = current_cell.distance + 1;\r\n                random_neighbour.index = ++this.current_cell_index;\r\n                stack.push(random_neighbour);\r\n                current_cell = random_neighbour;\r\n                end_cell = current_cell.distance > end_cell.distance ? current_cell : end_cell;\r\n            } else {\r\n                switch (this.generation_order) {\r\n                    case EGenerationOrder.Pop: {\r\n                        current_cell = stack.pop();\r\n                        break;\r\n                    }\r\n                    case EGenerationOrder.Shift: {\r\n                        current_cell = stack.shift();\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (route.length > 1) {\r\n                    this.routes.push(route);\r\n                }\r\n                route = []\r\n            }\r\n        }\r\n\r\n        end_cell.category = ECellCategory.End;\r\n        this.end_cell = end_cell;\r\n\r\n        this.for_each_cell((cell) => {\r\n            if (isUndefined(cell.index)) {\r\n                cell.index = -1;\r\n            }\r\n        })\r\n\r\n        // DEAD ENDS\r\n        let dead_ends = this.find_cells_with_accessibility(ECellAccessibilityLevel.DeadEnd);\r\n        dead_ends.forEach(cell => {\r\n            if (this.seeded_random() > (this.dead_ends_ratio)) {\r\n                if (cell.category === ECellCategory.Start || cell.category === ECellCategory.End) {\r\n                    return\r\n                }\r\n\r\n                let closed_neighbours = cell.get_closed_neighbours(this.cells);\r\n\r\n                if (closed_neighbours.length > 0) {\r\n                    let random_neighbour = closed_neighbours[Math.floor(this.seeded_random() * closed_neighbours.length)];\r\n\r\n                    cell.remove_wall_between(random_neighbour);\r\n                    cell.category = ECellCategory.Loop;\r\n                    this.routes.push([cell, random_neighbour]);\r\n                }\r\n            }\r\n        })\r\n\r\n        // SHORTCUTS\r\n        let transitive_cells = this.find_cells_with_accessibility(ECellAccessibilityLevel.Transitive);\r\n        transitive_cells.forEach(cell => {\r\n            let closed_neighbours = cell.get_closed_neighbours();\r\n\r\n            if (closed_neighbours.length > 1) {\r\n                let random_neighbour = closed_neighbours[Math.floor(this.seeded_random() * closed_neighbours.length)];\r\n                if (this.seeded_random() < this.shortcuts_ratio) {\r\n                    cell.remove_wall_between(random_neighbour);\r\n                    cell.category = ECellCategory.Shortcut;\r\n                    this.routes.push([cell, random_neighbour]);\r\n                }\r\n            }\r\n        })\r\n\r\n        this.for_each_cell((cell) => {\r\n            if (cell.walls_count === ECellAccessibilityLevel.Isolated) {\r\n                cell.category = ECellCategory.Empty;\r\n            }\r\n        })\r\n\r\n        this.reset_visited()\r\n    }\r\n    find_cells_with_accessibility(level: ECellAccessibilityLevel) {\r\n        let result = [];\r\n        this.for_each_cell((cell) => {\r\n            if (cell.walls_count === level) {\r\n                result.push(cell);\r\n            }\r\n        })\r\n\r\n        return result;\r\n    }\r\n\r\n    public reset_visited() {\r\n        this.for_each_cell((cell) => {\r\n            cell.visited = false;\r\n        })\r\n    }\r\n\r\n    protected for_each_cell(callback: (cell: MazeCell) => void) {\r\n        this.cells.forEach(cells => {\r\n            cells.forEach(cell => {\r\n                callback(cell);\r\n            })\r\n        })\r\n    }\r\n\r\n    to_json() {\r\n        return {\r\n            grid: this.grid_size,\r\n            routes: map(this.routes, route => {\r\n                return map(route, cell => cell.index)\r\n            }),\r\n            start: this.start_cell.index,\r\n            end: this.end_cell.index,\r\n            cells: map(flatten(this.cells), cell => {\r\n                return {\r\n                    x: cell.x,\r\n                    y: cell.y,\r\n                    walls: cell.walls,\r\n                    category: cell.category,\r\n                    distance: cell.distance,\r\n                    index: cell.index,\r\n                }\r\n            }),\r\n\r\n        }\r\n    }\r\n}","\r\n\r\nimport Vue from 'vue';\r\nimport Tweakpane from '@/components/Tweakpane.vue';\r\nimport { MazeGenerator, ECellCategory, MazeCell, ECellAccessibilityLevel } from './MazeGenerator/MazeGenerator'\r\nimport Canvas2D from '@/components/Canvas2D.vue';\r\nimport mixins from 'vue-typed-mixins'\r\nimport BaseComponent from '@/components/BaseComponent.vue';\r\nimport { map, throttle } from 'lodash';\r\nimport Syntax from '@/components/Syntax.vue';\r\n\r\nexport enum EColorScheme {\r\n    ProgrammerView,\r\n    MidnightContrast,\r\n    Midnight\r\n}\r\n\r\nconst color_schemes = {\r\n    [EColorScheme.ProgrammerView]: {\r\n        background: '#050505', // '#000000\r\n        floor_start_and_end: '#142f1e', // '#000000\r\n        floor_isolated: \"#050505\",\r\n        floor_dead_end: \"#2f1414\",\r\n        floor_transitive: \"#191919\",\r\n        fork_floor: \"#26142f\",\r\n        crossroad_floor: \"#2f142f\",\r\n        wall_north: \"hsl(0deg 50% 50%)\",\r\n        wall_east: \"hsl(90deg 50% 50%)\",\r\n        wall_south: \"hsl(180deg 50% 50%)\",\r\n        wall_west: \"hsl(270deg 50% 50%)\",\r\n        label_start: \"#8bc34a\",\r\n        label_end: \"#ff5722\",\r\n        label_shortcut: \"#4f4937\",\r\n        label_loop: \"#2b4964\",\r\n        label_dead_end: \"#454545\",\r\n        label_fork: \"#454545\",\r\n        label_crossroad: \"#454545\",\r\n        label_background: '#000000'\r\n    },\r\n    [EColorScheme.MidnightContrast]: {\r\n        background: '#0d1117', // A very dark gray for high contrast with wall colors\r\n        floor_start_and_end: '#58a6ff', // A bright blue to stand out for 'Start' and 'End'\r\n        floor_isolated: \"#161b22\", // A slightly lighter shade of the background for empty cells\r\n        floor_dead_end: \"#ff7b72\", // A soft red to indicate dead ends without overwhelming\r\n        floor_transitive: \"#30363d\", // Medium gray to indicate passable pathways\r\n        fork_floor: \"#a371f7\", // A gentle purple to denote forks in the maze\r\n        crossroad_floor: \"#a371f7\", // A strong blue to indicate crossroads clearly\r\n        wall_north: \"hsl(210deg 100% 70%)\", // Bright blue for north walls\r\n        wall_east: \"hsl(45deg 100% 60%)\", // A golden hue for east walls\r\n        wall_south: \"hsl(140deg 100% 60%)\", // Lively green for south walls\r\n        wall_west: \"hsl(330deg 100% 70%)\", // Pink for west walls\r\n        label_start: \"#7ee787\", // A vibrant green for the 'Start' label\r\n        label_end: \"#ff6e6e\", // A striking red for the 'End' label\r\n        label_shortcut: \"#f2cc60\", // Yellow for shortcuts to draw attention\r\n        label_loop: \"#56d4dd\", // Cyan for loops for a calming effect\r\n        label_dead_end: \"#ff8585\", // A lighter red for dead-end labels for readability\r\n        label_fork: \"#bf91f3\", // A lighter purple for fork labels\r\n        label_crossroad: \"#4c9aff\", // A different shade of blue for crossroad labels\r\n        label_background: '#21262d' // A dark slate for label backgrounds for contrast\r\n    },\r\n    [EColorScheme.Midnight]: {\r\n        background: '#252a33', // A deep charcoal gray for subtle contrast with wall colors\r\n        floor_start_and_end: '#3b5440', // A toned-down blue for a less stark 'Start' and 'End'\r\n        floor_isolated: \"#1f232b\", // A gray that's slightly lighter than the background for empty cells\r\n        floor_dead_end: \"#513e3e\", // Muted terracotta for indicating dead ends less dramatically\r\n        floor_transitive: \"#3e4451\", // Dark gray for passable pathways that blend with the surroundings\r\n        fork_floor: \"#4c424c\", // A dusky purple for a less vivid presentation of forks\r\n        crossroad_floor: \"#413e51\", // A desaturated blue for a less prominent indication of crossroads\r\n        wall_north: \"hsl(210deg 80% 50%)\", // Less bright blue for north walls\r\n        wall_east: \"hsl(45deg 80% 50%)\", // Softer golden for east walls\r\n        wall_south: \"hsl(140deg 80% 50%)\", // Soft green for south walls\r\n        wall_west: \"hsl(330deg 80% 50%)\", // Plum for west walls\r\n        label_start: \"#68a97b\", // Olive green for the 'Start' label\r\n        label_end: \"#e57373\", // Soft red for the 'End' label\r\n        label_shortcut: \"#e0ca68\", // Muted yellow for shortcuts\r\n        label_loop: \"#68a0b0\", // Soft teal for loops\r\n        label_dead_end: \"#e59797\", // Blush pink for dead-end labels\r\n        label_fork: \"#a094c7\", // Lavender for fork labels\r\n        label_crossroad: \"#6094cc\", // Softened blue for crossroad labels\r\n        label_background: '#2d313a' // Dark gray for label backgrounds that reduce contrast\r\n    }\r\n}\r\n\r\nexport default mixins(BaseComponent).extend({\r\n    name: \"MazeGenerator\",\r\n    computed: {},\r\n    props: {\r\n        category: String,\r\n        seed: {\r\n            type: String,\r\n            default: 0\r\n        }\r\n    },\r\n    components: { Tweakpane, Canvas2D, Syntax },\r\n    data() {\r\n        return {\r\n            wall_width: 0.015,\r\n            path_width: 0.035,\r\n            wall_padding: 0.03,\r\n            current_color_scheme: EColorScheme.Midnight,\r\n            json_data: {},\r\n            show_json_data_popup: false\r\n        }\r\n    },\r\n    mounted() {\r\n        (window as any).maze_generator = this;\r\n        this.render = this.render.bind(this);\r\n        this.canvas = this.$refs.canvas\r\n        this.maze_generator = new MazeGenerator();\r\n\r\n        // parsing seed\r\n        if (!isNaN(parseInt(this.seed))) {\r\n            console.log(`seed not random: ${this.seed}`)\r\n            this.maze_generator.seed = parseInt(this.seed);\r\n        } else {\r\n            console.log(`seed: random`)\r\n            this.set_random_seed()\r\n        }\r\n\r\n        this.generate()\r\n        this.update_canvas()\r\n        this.setup_tweakpane()\r\n        this.render()\r\n    },\r\n    beforeDestroy() {\r\n        (window as any).maze_generator = null;\r\n    },\r\n    methods: {\r\n        generate() {\r\n            this.maze_generator.generate();\r\n            this.json_data = this.maze_generator.to_json();\r\n        },\r\n        render() {\r\n            if (this.canvas) {\r\n                this.canvas.clear(color_schemes[this.current_color_scheme].background)\r\n\r\n                this.draw_cells()\r\n                this.draw_path();\r\n                this.draw_lables();\r\n                this.draw_indexes();\r\n\r\n                this.canvas.render()\r\n            }\r\n        },\r\n        update_canvas() {\r\n            this.canvas.viewport.width = this.maze_generator.grid_size;\r\n            this.canvas.viewport.height = this.maze_generator.grid_size;\r\n            this.canvas.user.scale = 1;\r\n            this.canvas.resize_canvas();\r\n            this.canvas.centrize()\r\n        },\r\n        draw_cells() {\r\n            this.maze_generator.for_each_cell((cell) => {\r\n                this.draw_cell(cell);\r\n            })\r\n        },\r\n        draw_lables() {\r\n\r\n            this.maze_generator.cells.forEach(cells => {\r\n                cells.forEach(cell_data => {\r\n                    switch (cell_data.category) {\r\n                        case ECellCategory.Start: {\r\n                            this.draw_cell_label(cell_data, \"START\", color_schemes[this.current_color_scheme].label_start)\r\n                            break;\r\n                        }\r\n                        case ECellCategory.End: {\r\n                            this.draw_cell_label(cell_data, \"FINISH\", color_schemes[this.current_color_scheme].label_end)\r\n                            break;\r\n                        }\r\n                        case ECellCategory.Shortcut: {\r\n                            this.draw_cell_label(cell_data, \"shortcut\", color_schemes[this.current_color_scheme].label_shortcut)\r\n                            break;\r\n                        }\r\n                        case ECellCategory.Loop: {\r\n                            this.draw_cell_label(cell_data, \"loop\", color_schemes[this.current_color_scheme].label_loop)\r\n                            break;\r\n                        }\r\n                        default: {\r\n                            switch (cell_data.walls_count) {\r\n                                case ECellAccessibilityLevel.DeadEnd: {\r\n                                    this.draw_cell_label(cell_data, \"dead\", color_schemes[this.current_color_scheme].label_dead_end)\r\n                                    break;\r\n                                }\r\n                                case ECellAccessibilityLevel.Fork: {\r\n                                    this.draw_cell_label(cell_data, \"fork\", color_schemes[this.current_color_scheme].label_fork)\r\n                                    break;\r\n                                }\r\n                                case ECellAccessibilityLevel.Crossroad: {\r\n                                    this.draw_cell_label(cell_data, \"cross\", color_schemes[this.current_color_scheme].label_crossroad)\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n        },\r\n        draw_cell_label(cell_data: MazeCell, label: string, color: string) {\r\n            const x = cell_data.x;\r\n            const y = cell_data.y;\r\n\r\n            let label_size = this.canvas.measure_text({ text: label, font_family: 'monospace', font_size: 1 / 8 });\r\n\r\n            this.canvas.draw_rect({\r\n                x: x + 1 / 2 - (label_size.width * 1.1) / 2,\r\n                y: y + 1 / 2 - label_size.height * 1.1,\r\n                width: label_size.width * 1.1,\r\n                height: 1 / 8,\r\n                fill_color: color_schemes[this.current_color_scheme].label_background\r\n            });\r\n\r\n            this.canvas.draw_text({\r\n                x: x + 1 / 2,\r\n                y: y + 1 / 2,\r\n                text: label,\r\n                fill_color: color,\r\n                font_family: 'monospace',\r\n                font_size: 1 / 8,\r\n                text_align: 'center',\r\n                max_width: 1\r\n            })\r\n        },\r\n        draw_cell(cell_data: MazeCell) {\r\n            const x = cell_data.x;\r\n            const y = cell_data.y;\r\n\r\n\r\n            let dx = this.wall_padding\r\n\r\n            if (cell_data.category === ECellCategory.Start || cell_data.category === ECellCategory.End) {\r\n                this.canvas.draw_rect({\r\n                    x: x + dx,\r\n                    y: y + dx,\r\n                    width: 1 - dx * 2,\r\n                    height: 1 - dx * 2,\r\n                    fill_color: color_schemes[this.current_color_scheme].floor_start_and_end\r\n                });\r\n            } else {\r\n                switch (cell_data.walls_count) {\r\n                    case ECellAccessibilityLevel.Isolated: {\r\n                        this.canvas.draw_rect({\r\n                            x: x + dx,\r\n                            y: y + dx,\r\n                            width: 1 - dx * 2,\r\n                            height: 1 - dx * 2,\r\n                            fill_color: color_schemes[this.current_color_scheme].floor_isolated\r\n                        });\r\n                        return;\r\n                        break;\r\n                    }\r\n                    case ECellAccessibilityLevel.DeadEnd: {\r\n                        this.canvas.draw_rect({\r\n                            x: x + dx,\r\n                            y: y + dx,\r\n                            width: 1 - dx * 2,\r\n                            height: 1 - dx * 2,\r\n                            fill_color: color_schemes[this.current_color_scheme].floor_dead_end\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ECellAccessibilityLevel.Transitive: {\r\n                        this.canvas.draw_rect({\r\n                            x: x + dx,\r\n                            y: y + dx,\r\n                            width: 1 - dx * 2,\r\n                            height: 1 - dx * 2,\r\n                            fill_color: color_schemes[this.current_color_scheme].floor_transitive\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ECellAccessibilityLevel.Fork: {\r\n                        this.canvas.draw_rect({\r\n                            x: x + dx,\r\n                            y: y + dx,\r\n                            width: 1 - dx * 2,\r\n                            height: 1 - dx * 2,\r\n                            fill_color: color_schemes[this.current_color_scheme].fork_floor\r\n                        });\r\n                        break;\r\n                    }\r\n                    case ECellAccessibilityLevel.Crossroad: {\r\n                        this.canvas.draw_rect({\r\n                            x: x + dx,\r\n                            y: y + dx,\r\n                            width: 1 - dx * 2,\r\n                            height: 1 - dx * 2,\r\n                            fill_color: color_schemes[this.current_color_scheme].crossroad_floor\r\n                        });\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n\r\n            }\r\n            // debug walls\r\n            if (cell_data.walls.north) {\r\n                this.canvas.draw_line({\r\n                    points: [\r\n                        {\r\n                            x: x,\r\n                            y: y + dx\r\n                        },\r\n                        {\r\n                            x: x + 1,\r\n                            y: y + dx\r\n                        }\r\n                    ],\r\n                    stroke_color: color_schemes[this.current_color_scheme].wall_north,\r\n                    line_width: this.wall_width\r\n\r\n                })\r\n            }\r\n\r\n            if (cell_data.walls.east) {\r\n                this.canvas.draw_line({\r\n                    points: [\r\n                        {\r\n                            x: x + 1 - dx,\r\n                            y: y\r\n                        },\r\n                        {\r\n                            x: x + 1 - dx,\r\n                            y: y + 1\r\n                        }\r\n                    ],\r\n                    stroke_color: color_schemes[this.current_color_scheme].wall_east,\r\n                    line_width: this.wall_width\r\n\r\n                })\r\n            }\r\n\r\n            if (cell_data.walls.south) {\r\n                this.canvas.draw_line({\r\n                    points: [\r\n                        {\r\n                            x: x,\r\n                            y: y + 1 - dx\r\n                        },\r\n                        {\r\n                            x: x + 1,\r\n                            y: y + 1 - dx\r\n                        }\r\n                    ],\r\n                    stroke_color: color_schemes[this.current_color_scheme].wall_south,\r\n                    line_width: this.wall_width\r\n\r\n                })\r\n            }\r\n\r\n            if (cell_data.walls.west) {\r\n                this.canvas.draw_line({\r\n                    points: [\r\n                        {\r\n                            x: x + dx,\r\n                            y: y\r\n                        },\r\n                        {\r\n                            x: x + dx,\r\n                            y: y + 1\r\n                        }\r\n                    ],\r\n                    stroke_color: color_schemes[this.current_color_scheme].wall_west,\r\n                    line_width: this.wall_width\r\n\r\n                })\r\n            }\r\n\r\n        },\r\n        draw_indexes() {\r\n            let dx = this.wall_padding\r\n\r\n            this.maze_generator.for_each_cell((cell) => {\r\n                if (cell.category !== ECellCategory.Empty) {\r\n                    this.canvas.draw_text({\r\n                        x: cell.x - dx + 1 - (1 / 16),\r\n                        y: cell.y - dx + 1 - (1 / 16),\r\n                        text: `idx: ${cell.index}`,\r\n                        fill_color: '#ffffff',\r\n                        font_family: 'monospace',\r\n                        font_size: 1 / 16,\r\n                        text_align: 'right',\r\n                        max_width: 1\r\n                    })\r\n                }\r\n            })\r\n\r\n            this.maze_generator.for_each_cell((cell) => {\r\n                if (cell.category !== ECellCategory.Empty) {\r\n                    this.canvas.draw_text({\r\n                        x: cell.x + dx + (1 / 16),\r\n                        y: cell.y - dx + 1 - (1 / 16),\r\n                        text: `dst: ${cell.distance}`,\r\n                        fill_color: '#000000',\r\n                        font_family: 'monospace',\r\n                        font_size: 1 / 16,\r\n                        text_align: 'left',\r\n                        max_width: 1\r\n                    })\r\n                }\r\n            })\r\n        },\r\n        draw_path(start_cell: MazeCell = this.maze_generator.start_cell) {\r\n            let routes = this.maze_generator.routes;\r\n            routes.forEach((route: MazeCell[], route_index: number) => {\r\n                let points = map(route, (cell: MazeCell, distance: number) => {\r\n                    return {\r\n                        x: cell.x + 0.5,\r\n                        y: cell.y + 0.5\r\n                    }\r\n                })\r\n\r\n                this.canvas.draw_line({\r\n                    points: points,\r\n                    stroke_color: `hsl(${(route_index / routes.length) * 360 + 90}, 100%, 75%)`,\r\n                    line_width: this.path_width\r\n                })\r\n            })\r\n        },\r\n        set_random_seed() {\r\n            this.maze_generator.seed = Math.floor(Math.random() * 10000);\r\n        },\r\n        setup_tweakpane() {\r\n            let pane = this.$refs.tweakpane.pane;\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addBinding(this.maze_generator, 'seed', {\r\n                label: 'Seed',\r\n                min: 0,\r\n                max: 10000,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.generate();\r\n                this.render()\r\n\r\n                this.update_route({\r\n                    seed: this.maze_generator.seed.toString()\r\n                })\r\n            }, 1000 / 15));\r\n\r\n            pane.addButton({\r\n                title: 'Generate maze',\r\n            }).on('click', () => {\r\n                this.set_random_seed()\r\n                this.generate();\r\n                this.$refs.tweakpane.pane.refresh();\r\n                this.update_canvas()\r\n                this.render()\r\n            });\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n\r\n\r\n            pane.addBinding(this.maze_generator, 'grid_size', {\r\n                label: 'Grid Size',\r\n                min: 2,\r\n                max: 20,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.update_canvas()\r\n                this.generate();\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n\r\n            pane.addBinding(this.maze_generator, 'sparseness', {\r\n                label: 'Sparseness',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.001,\r\n            }).on('change', throttle(() => {\r\n                this.generate();\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addBinding(this.maze_generator, 'dead_ends_ratio', {\r\n                label: 'Dead-Ends Ratio',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.001,\r\n            }).on('change', throttle(() => {\r\n                this.generate();\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addBinding(this.maze_generator, 'shortcuts_ratio', {\r\n                label: 'Shortcuts Ratio',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.001,\r\n            }).on('change', throttle(() => {\r\n                this.generate();\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addBlade({\r\n                view: 'list',\r\n                label: 'Generation Order',\r\n                options: [\r\n                    { text: 'Pop', value: 0 },\r\n                    { text: 'Shift', value: 1 }\r\n                ],\r\n                value: 1,\r\n            }).on('change', throttle((ev) => {\r\n                console.log(ev.value)\r\n                this.maze_generator.generation_order = ev.value;\r\n                this.generate();\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addBlade({\r\n                view: 'list',\r\n                label: 'Theme',\r\n                options: [\r\n                    { text: 'ProgrammerView', value: 0 },\r\n                    { text: 'MidnightContrast', value: 1 },\r\n                    { text: 'Midnight', value: 2 },\r\n                ],\r\n                value: 2,\r\n            }).on('change', (ev) => {\r\n                this.current_color_scheme = ev.value;\r\n                this.render()\r\n            });\r\n\r\n            pane.addBinding(this, 'wall_padding', {\r\n                label: 'Walls Padding',\r\n                min: 0,\r\n                max: 0.2,\r\n                step: 0.01,\r\n            }).on('change', () => {\r\n                this.render()\r\n            })\r\n\r\n            pane.addBinding(this, 'wall_width', {\r\n                label: 'Walls Width',\r\n                min: 0.001,\r\n                max: 0.05,\r\n                step: 0.01,\r\n            }).on('change', () => {\r\n                this.render()\r\n            })\r\n\r\n            pane.addBinding(this, 'path_width', {\r\n                label: 'Path Width',\r\n                min: 0.01,\r\n                max: 0.25,\r\n                step: 0.01,\r\n            }).on('change', () => {\r\n                this.render()\r\n            })\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addButton({\r\n                title: 'Show JSON',\r\n            }).on('click', () => {\r\n                this.show_json_data_popup = true;\r\n            });\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addButton({\r\n                title: 'Reset Viewport',\r\n            }).on('click', () => {\r\n                this.canvas.reset_user_transform()\r\n            });\r\n        }\r\n    },\r\n\r\n})\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MazeGenerator.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./MazeGenerator.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./MazeGenerator.vue?vue&type=template&id=dd86bdb0&\"\nimport script from \"./MazeGenerator.vue?vue&type=script&lang=ts&\"\nexport * from \"./MazeGenerator.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./MazeGenerator.vue?vue&type=style&index=0&id=dd86bdb0&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_setupProxy","staticClass","class","popup","closing","on","$event","target","currentTarget","$emit","download_as_file","file_name","text_content","_v","copied_tooltip","copy_to_clipboard","show_copied_tooltip","_e","directives","name","rawName","value","expression","staticRenderFns","mixins","BaseComponent","extend","data","props","code","type","String","Object","required","default","file","Boolean","download_name","mounted","update","watch","methods","async","read_text_file","length","split","pop","console","log","isString","JSON","stringify","setTimeout","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","component","ECellCategory","ECellAccessibilityLevel","EGenerationOrder","ref","_m","attrs","is_mobile","show_json_data_popup","json_data","maze_generator","seed","MazeCell","constructor","x","y","category","Default","_defineProperty","walls","north","east","south","west","visited","walls_count","result","get_closed_neighbours","filter","get_all_neighbours","cell","get_wall_between","Isolated","get_open_neighbours","cells","map","neighbours_offsets","offset","index","get_neighbour_cell","remove_wall_between","cell2","set_wall_between","add_wall_between","cell1","Error","grid_size","MazeGenerator","Shift","max_cells_count","update_generator","seeded_random","Alea","toString","get_random_cell","Math","floor","initialize","current_cell_index","routes","generate","stack","current_cell","start_cell","end_cell","distance","Start","push","route","max","sparseness","neighbours","unvisited_neighbours","random_neighbour","generation_order","Pop","shift","End","for_each_cell","isUndefined","dead_ends","find_cells_with_accessibility","DeadEnd","forEach","dead_ends_ratio","closed_neighbours","Loop","transitive_cells","Transitive","shortcuts_ratio","Shortcut","Empty","reset_visited","level","callback","to_json","grid","start","end","flatten","EColorScheme","color_schemes","ProgrammerView","background","floor_start_and_end","floor_isolated","floor_dead_end","floor_transitive","fork_floor","crossroad_floor","wall_north","wall_east","wall_south","wall_west","label_start","label_end","label_shortcut","label_loop","label_dead_end","label_fork","label_crossroad","label_background","MidnightContrast","Midnight","computed","components","Tweakpane","Canvas2D","Syntax","wall_width","path_width","wall_padding","current_color_scheme","window","bind","canvas","$refs","isNaN","parseInt","set_random_seed","update_canvas","setup_tweakpane","beforeDestroy","clear","draw_cells","draw_path","draw_lables","draw_indexes","viewport","width","height","user","scale","resize_canvas","centrize","draw_cell","cell_data","draw_cell_label","Fork","Crossroad","label","color","label_size","measure_text","font_family","font_size","draw_rect","fill_color","draw_text","text_align","max_width","dx","draw_line","points","stroke_color","line_width","route_index","random","pane","tweakpane","addBlade","view","addBinding","min","step","throttle","update_route","addButton","title","refresh","options","ev","reset_user_transform"],"sourceRoot":""}