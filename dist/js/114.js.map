{"version":3,"file":"js/114.js","mappings":"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","sources":["webpack://chronicle/./src/views/applets/AStarPathfinder.vue","webpack://chronicle/./src/views/applets/AStar/AStar.ts","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?563c","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?372c","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?5533"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"a-star-pathfinder\",on:{\"mousemove\":_vm.handle_mousemove,\"mouseup\":_vm.handle_mouseup,\"contextmenu\":function($event){$event.preventDefault();}}},[_c('div',{staticClass:\"control-panel\"},[_c('Tweakpane',{ref:\"tweakpane\"}),_vm._m(0)],1),_c('Canvas2D',{ref:\"canvas\",attrs:{\"show_debug\":!_vm.is_mobile,\"allow_user_scale\":true,\"allow_user_translate\":true,\"allow_context_menu\":true},on:{\"update\":_vm.render}},[_c('viewport',{attrs:{\"width\":\"10\",\"height\":\"10\"}},[_c('rect',{attrs:{\"x\":\"1\",\"y\":\"1\",\"width\":\"2\",\"height\":\"2\"}})])],1)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('ul',{staticClass:\"info\"},[_c('li',[_c('i',[_vm._v(\"Left\")]),_vm._v(\" mouse button - set \"),_c('b',{attrs:{\"color\":\"#\"}},[_vm._v(\"start\")])]),_c('li',[_c('i',[_vm._v(\"Right\")]),_vm._v(\" mouse button - set finish\")]),_c('li',[_c('i',[_vm._v(\"Middle\")]),_vm._v(\" mouse button - toggle cell\")])])\n}]\n\nexport { render, staticRenderFns }","\r\nexport type FFindNeighbors<T> = (cell: T, neighbors: Set<T>) => void;\r\nexport type FGetDistance<T> = (from: T, to: T, path: T[] | null) => number;\r\n\r\nexport type Node<T> = {\r\n    score: number;\r\n    path: T[];\r\n};\r\n\r\nexport interface IAStarPathfinderParams<T> {\r\n    find_neighbors: FFindNeighbors<T>;\r\n    get_distance?: FGetDistance<T>;\r\n    minRange?: number;\r\n    maxRange?: number;\r\n\r\n}\r\n\r\nexport class AStarPathfinder<T> {\r\n    public min_range: number;\r\n    public max_range: number;\r\n    protected open: Map<T, Node<T>>;\r\n    protected closed: Map<T, Node<T>>;\r\n    private neighbors: Set<T>;\r\n    private origin: T | undefined;\r\n    private destination: T | undefined;\r\n\r\n    public last_complexity: number = 0;\r\n    public max_complexity: number = 256;\r\n\r\n    constructor(params: IAStarPathfinderParams<T>) {\r\n        let { find_neighbors, get_distance, minRange, maxRange } = params;\r\n\r\n        if (!find_neighbors) {\r\n            throw new Error(\"find_neighbors is required\");\r\n        } else {\r\n            this.find_neighbors = find_neighbors;\r\n        }\r\n\r\n        if (get_distance) {\r\n            this.get_distance = get_distance;\r\n        }\r\n\r\n        this.min_range = minRange || 0;\r\n        this.max_range = maxRange || 0;\r\n        this.open = new Map<T, Node<T>>();\r\n        this.closed = new Map<T, Node<T>>();\r\n        this.neighbors = new Set<T>();\r\n    }\r\n\r\n    public get reachable(): Map<T, T[]> {\r\n        const result = new Map<T, T[]>();\r\n        this.closed.forEach((value, key) => {\r\n            result.set(key, value.path);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    protected static create_node<T>(path: T[] = [], score: number = 0): Node<T> {\r\n        return { score, path };\r\n    }\r\n\r\n    public find_all_in_range(start: T): Iterable<T> {\r\n        this.prepare();\r\n        this.origin = start;\r\n        this.destination = undefined;\r\n        this.open.set(start, AStarPathfinder.create_node([start]));\r\n\r\n        while (this.open.size > 0) {\r\n            const closest = this.close_closest_open_node();\r\n            if (closest && closest[1].score >= this.min_range && (this.max_range === 0 || closest[1].score <= this.max_range)) {\r\n                this.all_option_callback(closest[0]);\r\n            }\r\n            if (this.quit_early(closest[0])) {\r\n                break;\r\n            }\r\n\r\n            this.maybe_queue_neighbors(closest);\r\n        }\r\n\r\n        if (this.min_range > 0) {\r\n            return Array.from(this.closed.keys()).filter(t => this.closed.get(t)!.score >= this.min_range && (this.max_range === 0 || this.closed.get(t)!.score <= this.max_range));\r\n        }\r\n        return this.closed.keys();\r\n    }\r\n\r\n    public find_path(start: T, end: T): T[] | null {\r\n        this.prepare();\r\n        this.origin = start;\r\n        this.destination = end;\r\n        this.open.set(start, AStarPathfinder.create_node([start]));\r\n\r\n        let shortest_path: [T, Node<T>] | null = null;\r\n        while (this.open.size > 0) {\r\n            const lowest = this.close_lowest_score_open_node();\r\n            if (lowest && (lowest[0] === end || this.quit_early(lowest[0]))) {\r\n                shortest_path = lowest;\r\n                break;\r\n            }\r\n            \r\n            this.last_complexity++;\r\n\r\n            if (this.last_complexity > this.max_complexity) {\r\n                console.log(`Max complexity reached: ${this.last_complexity}`);\r\n                break;\r\n            }\r\n\r\n            this.maybe_queue_neighbors(lowest);\r\n        }\r\n\r\n        if (!shortest_path || !shortest_path[1]) {\r\n            console.log(`No path between ${start} and ${end}`);\r\n            return null;\r\n        }\r\n\r\n        shortest_path[1].path.forEach(t => {\r\n            this.path_callback(t, shortest_path[1].path);\r\n        });\r\n\r\n        return shortest_path[1].path;\r\n    }\r\n\r\n    protected add_neighbour(neighbor: T): void {\r\n        this.neighbors.add(neighbor);\r\n    }\r\n\r\n    protected find_neighbors(cell: T, neighbors: Set<T>): void {\r\n        throw new Error(\"Not implemented\");\r\n    };\r\n\r\n    protected prepare(): void {\r\n        this.last_complexity = 0;\r\n\r\n        this.open.clear();\r\n        this.closed.clear();\r\n    }\r\n\r\n    protected get_distance(from: T, to: T, path: T[] | null): number {\r\n        return path ? path.length : 0;\r\n    }\r\n\r\n    protected quit_early(cell: T): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected is_valid_path(cell: T): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected path_callback(pathNode: T, path: T[]): void { }\r\n\r\n    protected all_option_callback(pathNode: T): void { }\r\n\r\n    private maybe_queue_neighbors(pair: [T, Node<T>]): void {\r\n        this.find_neighbors(pair[0], this.neighbors);\r\n        this.neighbors.forEach(neighbor => {\r\n            const new_path = [...pair[1].path, neighbor];\r\n            this.maybe_queue_neighbor(pair[1], new_path, neighbor);\r\n        });\r\n        this.neighbors.clear();\r\n    }\r\n\r\n    private maybe_queue_neighbor(node: Node<T>, new_path: T[], neighbor: T): void {\r\n        if (!this.is_valid_path(neighbor)) {\r\n            return;\r\n        }\r\n\r\n        let new_score = this.get_distance(this.origin!, neighbor, new_path);\r\n        if (this.destination) {\r\n            new_score += this.get_distance(neighbor, this.destination, null);\r\n        }\r\n\r\n        if (this.max_range !== 0 && new_score > this.max_range) {\r\n            return;\r\n        }\r\n\r\n        if (!this.open.has(neighbor) && !this.closed.has(neighbor)) {\r\n            this.open.set(neighbor, AStarPathfinder.create_node(new_path, new_score));\r\n            return;\r\n        }\r\n\r\n        if (this.open.has(neighbor) && new_score < this.open.get(neighbor)!.score) {\r\n            const updating_node = this.open.get(neighbor)!;\r\n            updating_node.path = new_path;\r\n            updating_node.score = new_score;\r\n            return;\r\n        }\r\n\r\n        if (this.closed.has(neighbor) && new_score < this.closed.get(neighbor)!.score) {\r\n            const updating_node = this.closed.get(neighbor)!;\r\n            updating_node.path = new_path;\r\n            updating_node.score = new_score;\r\n            this.open.set(neighbor, updating_node);\r\n            this.closed.delete(neighbor);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private close_lowest_score_open_node(): [T, Node<T>] | null {\r\n        if (this.open.size === 0) {\r\n            return null;\r\n        }\r\n        let lowest = Array.from(this.open.entries()).reduce((a, b) => a[1].score < b[1].score ? a : b);\r\n        this.open.delete(lowest[0]);\r\n        this.closed.set(lowest[0], lowest[1]);\r\n        return lowest;\r\n    }\r\n\r\n    private close_closest_open_node(): [T, Node<T>] | null {\r\n        if (this.open.size === 0) {\r\n            return null;\r\n        }\r\n        let closest = Array.from(this.open.entries()).reduce((a, b) => a[1].path.length < b[1].path.length ? a : b);\r\n        this.open.delete(closest[0]);\r\n        this.closed.set(closest[0], closest[1]);\r\n        return closest;\r\n    }\r\n}","\r\n\r\nimport * as THREE from 'three';\r\nimport Vue from 'vue';\r\nimport Canvas2D from '@/components/Canvas2D.vue';\r\nimport Tweakpane from '@/components/Tweakpane.vue';\r\nimport mixins from 'vue-typed-mixins'\r\nimport BaseComponent from '@/components/BaseComponent.vue';\r\nimport { debounce, fill, map, throttle } from 'lodash';\r\nimport Syntax from '@/components/CodePreview.vue';\r\nimport { AStarPathfinder } from './AStar/AStar';\r\nimport Alea from 'alea'\r\nimport { lerp_float } from '@/tools';\r\n\r\nconst color_scheme = {\r\n    background: \"#111111\",     // Charcoal for a modern, sleek background\r\n    free_cell: \"#c0c0c0\",      // Pewter Blue for unoccupied cells, providing a soft contrast\r\n    blocked_cell: \"#474747\",   // Onyx for blocked cells, blending well but distinguishable\r\n    start_cell: \"#03a9f4\",     // Jade Green for the start cell, more visible against the background\r\n    finish_cell: \"#9c27b0\",    // Carmine Red for the finish cell, signaling 'stop' or 'end'\r\n    cell_gap_color: \"#2A3439\", // Gunmetal for gaps between cells, for a subtle boundary\r\n    hovered_cell: \"#87CEEB\",   // Sky Blue for hovered cells, standing out but not overpowering\r\n    path_color: \"#ffeb3b\",     // Amber for the path, bright and attention-grabbing\r\n    visited_color: \"#f44336\"\r\n};\r\n\r\nclass Cell {\r\n    x: number;\r\n    y: number;\r\n    blocked: boolean;\r\n    is_same(cell: Cell) {\r\n        return this.x == cell.x && this.y == cell.y\r\n    }\r\n    constructor(x: number, y: number, blocked: boolean) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.blocked = blocked;\r\n    }\r\n}\r\n\r\nexport default mixins(BaseComponent).extend({\r\n    name: \"AStarDemo\",\r\n    components: { Canvas2D, Tweakpane },\r\n    computed: {},\r\n    props: {\r\n        category: String,\r\n        seed: {\r\n            type: String,\r\n            default: 0\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            grid_size: 16,\r\n            blockiness: 0.25,\r\n            directional_bias: 0.5,\r\n            cells: [],\r\n            allow_diagonal: true,\r\n            visited_cells: [],\r\n            path_length: 0,\r\n            hovered_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n            start_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n            finish_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n        }\r\n    },\r\n    mounted() {\r\n        this.canvas = this.$refs.canvas;\r\n\r\n        // parsing seed\r\n        if (!isNaN(parseInt(this.seed))) {\r\n            console.log(`seed not random: ${this.seed}`)\r\n            this.seed = parseInt(this.seed);\r\n        } else {\r\n            console.log(`seed: random`)\r\n            this.seed = Math.floor(Math.random() * 10000)\r\n        }\r\n\r\n\r\n        this.pathfinder = new AStarPathfinder<Cell>({\r\n            find_neighbors: this.find_neighbors.bind(this),\r\n            get_distance: (cell1, cell2) => {\r\n                let distance = Math.sqrt(Math.abs(cell1.x - cell2.x) + Math.abs(cell1.y - cell2.y))\r\n\r\n                // directional bias\r\n                let global_direction = new THREE.Vector2(this.finish_cell.x - this.start_cell.x, this.finish_cell.y - this.start_cell.y).normalize()\r\n\r\n                let local_direction = new THREE.Vector2(cell2.x - cell1.x, cell2.y - cell1.y).normalize()\r\n\r\n                let direction_delta = Math.abs(global_direction.x - local_direction.x) + Math.abs(global_direction.y - local_direction.y)\r\n                direction_delta = Math.pow(direction_delta, 2)\r\n\r\n                let bias = lerp_float(1, direction_delta, this.directional_bias);\r\n                bias = Math.pow(bias, 4)\r\n                distance *= bias\r\n\r\n                return distance;\r\n            },\r\n        })\r\n\r\n        this.update_path = debounce(this.update_path, 1000 / 30)\r\n\r\n        this.setup_tweakpane()\r\n        this.regenerate()\r\n        this.render()\r\n    },\r\n    beforeMount() { },\r\n    methods: {\r\n        find_neighbors(cell: Cell, neighbors: Set<Cell>) {\r\n\r\n            let x = cell.x\r\n            let y = cell.y\r\n\r\n\r\n            if (this.allow_diagonal) {\r\n                if (x > 0 && y > 0 && !this.cells[y - 1][x - 1].blocked && !this.cells[y][x - 1].blocked && !this.cells[y - 1][x].blocked) {\r\n                    neighbors.add(this.cells[y - 1][x - 1])\r\n                }\r\n\r\n                if (x < this.grid_size - 1 && y > 0 && !this.cells[y - 1][x + 1].blocked && !this.cells[y][x + 1].blocked && !this.cells[y - 1][x].blocked) {\r\n                    neighbors.add(this.cells[y - 1][x + 1])\r\n                }\r\n\r\n                if (x > 0 && y < this.grid_size - 1 && !this.cells[y + 1][x - 1].blocked && !this.cells[y][x - 1].blocked && !this.cells[y + 1][x].blocked) {\r\n                    neighbors.add(this.cells[y + 1][x - 1])\r\n                }\r\n\r\n                if (x < this.grid_size - 1 && y < this.grid_size - 1 && !this.cells[y + 1][x + 1].blocked && !this.cells[y][x + 1].blocked && !this.cells[y + 1][x].blocked) {\r\n                    neighbors.add(this.cells[y + 1][x + 1])\r\n                }\r\n            }\r\n\r\n            if (x > 0 && !this.cells[y][x - 1].blocked) {\r\n                neighbors.add(this.cells[y][x - 1])\r\n            }\r\n\r\n            if (x < this.grid_size - 1 && !this.cells[y][x + 1].blocked) {\r\n                neighbors.add(this.cells[y][x + 1])\r\n            }\r\n\r\n            if (y > 0 && !this.cells[y - 1][x].blocked) {\r\n                neighbors.add(this.cells[y - 1][x])\r\n            }\r\n\r\n            if (y < this.grid_size - 1 && !this.cells[y + 1][x].blocked) {\r\n                neighbors.add(this.cells[y + 1][x])\r\n            }\r\n\r\n\r\n            this.visited_cells = [...this.visited_cells, ...neighbors]\r\n        },\r\n        render() {\r\n            if (this.canvas) {\r\n                this.canvas.clear(color_scheme.background)\r\n                this.render_scene()\r\n                this.canvas.render()\r\n            }\r\n        },\r\n        render_scene() {\r\n            // rendering cells\r\n            this.for_each_cell((cell) => {\r\n                let x = cell.x\r\n                let y = cell.y\r\n\r\n                let fill_color = color_scheme.free_cell\r\n                if (this.cells[y][x].blocked) {\r\n                    fill_color = color_scheme.blocked_cell\r\n                }\r\n\r\n                this.canvas.draw_rect({ x, y, width: 1, height: 1, fill_color, stroke_color: color_scheme.cell_gap_color })\r\n\r\n                if (this.start_cell && this.start_cell.x == x && this.start_cell.y == y) {\r\n                    this.canvas.draw_rect({ x: x + 0.1, y: y + 0.1, width: 0.8, height: 0.8, fill_color: color_scheme.start_cell, alpha: 1, rotation: Math.PI / 4 })\r\n                }\r\n\r\n                if (this.finish_cell && this.finish_cell.x == x && this.finish_cell.y == y) {\r\n                    this.canvas.draw_rect({ x: x + 0.1, y: y + 0.1, width: 0.8, height: 0.8, fill_color: color_scheme.finish_cell, alpha: 1 })\r\n                }\r\n\r\n                if (!this.cells[y][x].blocked && this.hovered_cell && this.hovered_cell.x == x && this.hovered_cell.y == y) {\r\n                    this.canvas.draw_rect({ x, y, width: 1, height: 1, fill_color: color_scheme.hovered_cell, alpha: 0.3 })\r\n                }\r\n            })\r\n\r\n            // rndering visited cells\r\n            this.visited_cells.forEach((cell) => {\r\n                let x = cell.x\r\n                let y = cell.y\r\n\r\n                this.canvas.draw_rect({ x, y, width: 1, height: 1, fill_color: color_scheme.visited_color, alpha: 0.075 })\r\n            });\r\n\r\n\r\n            //  rendering path\r\n            if (this.path) {\r\n                let points = map(this.path, (cell) => {\r\n                    return { x: cell.x + 0.5, y: cell.y + 0.5 }\r\n                })\r\n\r\n                this.canvas.draw_line({\r\n                    points: points, stroke_color: color_scheme.path_color, line_width: 0.05, alpha: 1\r\n                })\r\n            }\r\n        },\r\n        update_canvas() {\r\n            this.canvas.viewport.width = this.grid_size;\r\n            this.canvas.viewport.height = this.grid_size;\r\n            this.canvas.user.scale = 1;\r\n            this.canvas.resize_canvas();\r\n        },\r\n        fill_random_cells() {\r\n            for (let y = 0; y < this.grid_size; y++) {\r\n                this.cells[y] = [];\r\n                for (let x = 0; x < this.grid_size; x++) {\r\n                    if (this.seeded_random() < this.blockiness) {\r\n                        this.cells[y][x] = new Cell(x, y, true);\r\n                    } else {\r\n                        this.cells[y][x] = new Cell(x, y, false);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        set_random_start_finish_cells() {\r\n            this.for_each_cell((cell) => {\r\n                if (!cell.blocked) {\r\n                    if (this.seeded_random() < 0.25) {\r\n                        this.start_cell = cell\r\n                        return true\r\n                    }\r\n                }\r\n                return false\r\n            })\r\n\r\n            this.for_each_cell_reverse((cell) => {\r\n                if (!cell.blocked) {\r\n                    if (this.seeded_random() < 0.25) {\r\n                        this.finish_cell = cell\r\n                        return true\r\n                    }\r\n                }\r\n                return false\r\n            })\r\n\r\n            this.update_path()\r\n        },\r\n        for_each_cell(callback: (cell: Cell) => boolean) {\r\n            let _break = false\r\n            for (let y = 0; y < this.grid_size; y++) {\r\n                for (let x = 0; x < this.grid_size; x++) {\r\n                    if (callback(this.cells[y][x])) {\r\n                        _break = true\r\n                        break;\r\n                    }\r\n                }\r\n                if (_break) {\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        for_each_cell_reverse(callback: (cell: Cell) => boolean) {\r\n            let _break = false\r\n            for (let y = this.grid_size - 1; y >= 0; y--) {\r\n                for (let x = this.grid_size - 1; x >= 0; x--) {\r\n                    if (callback(this.cells[y][x])) {\r\n                        _break = true\r\n                        break;\r\n                    }\r\n                }\r\n                if (_break) {\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        regenerate() {\r\n            this.reset()\r\n            this.update_random_generator()\r\n            this.fill_random_cells()\r\n            this.set_random_start_finish_cells()\r\n            this.canvas.reset_user_transform()\r\n            this.update_canvas()\r\n            this.canvas.centrize()\r\n        },\r\n        update_random_generator() {\r\n            this.seeded_random = Alea(this.seed.toString())\r\n        },\r\n        update_path() {\r\n            this.visited_cells = []\r\n\r\n            if (this.start_cell && this.finish_cell) {\r\n                let path = this.pathfinder.find_path(this.start_cell, this.finish_cell)\r\n                this.path = path\r\n            } else {\r\n                this.path = null\r\n            }\r\n\r\n            this.path_length = this.path ? this.path.length : 0\r\n            this.render()\r\n        },\r\n        handle_mousemove(e: MouseEvent) {\r\n            if (this.canvas) {\r\n                let coords = this.canvas.screen_to_viewport({ x: e.offsetX, y: e.offsetY })\r\n                let x = Math.floor(coords.x)\r\n                let y = Math.floor(coords.y)\r\n\r\n\r\n                if (this.cells[y]) {\r\n                    if (this.cells[y][x]) {\r\n                        let cell = this.cells[y][x]\r\n\r\n                        if (!cell.blocked) {\r\n                            this.hovered_cell = cell\r\n                        } else {\r\n                            this.hovered_cell = null\r\n                        }\r\n\r\n                        this.render()\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        },\r\n        handle_mouseup(e: MouseEvent) {\r\n            let coords = this.canvas.screen_to_viewport({ x: e.offsetX, y: e.offsetY })\r\n            let x = Math.floor(coords.x)\r\n            let y = Math.floor(coords.y)\r\n\r\n            if (x < 0 || x >= this.grid_size || y < 0 || y >= this.grid_size) {\r\n                return\r\n            }\r\n\r\n            switch (e.button) {\r\n                case 0:\r\n                    if (!this.cells[y][x].blocked) {\r\n                        this.start_cell = this.cells[y][x]\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    this.cells[y][x].blocked = !this.cells[y][x].blocked\r\n                    break;\r\n                case 2:\r\n                    if (!this.cells[y][x].blocked) {\r\n                        this.finish_cell = this.cells[y][x]\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if (this.start_cell && this.start_cell.is_same(this.finish_cell)) {\r\n                this.finish_cell = null\r\n            }\r\n\r\n            this.update_path()\r\n\r\n        },\r\n        reset() {\r\n            this.start_cell = null\r\n            this.finish_cell = null\r\n            this.path = null\r\n        },\r\n        setup_tweakpane() {\r\n            let pane = this.$refs.tweakpane.pane;\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addBinding(this, 'grid_size', {\r\n                label: 'Grid Size',\r\n                min: 2,\r\n                max: 32,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            pane.addBinding(this, 'blockiness', {\r\n                label: 'Blockiness',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.01,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            pane.addBinding(this, 'directional_bias', {\r\n                label: 'Directional Bias',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.01,\r\n            }).on('change', throttle(() => {\r\n                // this.regenerate()\r\n                this.update_path()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            // max_complexity prop of pathfinder\r\n            pane.addBinding(this.pathfinder, 'max_complexity', {\r\n                label: 'Max Complexity',\r\n                min: 0,\r\n                max: 512,\r\n                step: 0.01,\r\n            }).on('change', throttle(() => {\r\n                this.update_path()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n\r\n            pane.addBinding(this, 'allow_diagonal', {\r\n                label: 'Allow Diagonal',\r\n            }).on('change', throttle(() => {\r\n                this.update_path()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n\r\n            pane.addButton({\r\n                title: 'Set Random Start/Finish',\r\n            }).on('click', () => {\r\n                this.set_random_start_finish_cells()\r\n                this.render()\r\n            });\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addBinding(this, 'seed', {\r\n                label: 'Seed',\r\n                min: 0,\r\n                max: 10000,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addButton({\r\n                title: 'Random Seed',\r\n            }).on('click', () => {\r\n                this.seed = Math.floor(Math.random() * 10000)\r\n                this.regenerate()\r\n                this.canvas.render()\r\n            });\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addButton({\r\n                title: 'Reset Viewport',\r\n            }).on('click', () => {\r\n                this.canvas.reset_user_transform()\r\n                this.canvas.centrize()\r\n            });\r\n\r\n            pane.addBinding(this.pathfinder, 'last_complexity', {\r\n                label: 'Complexity',\r\n                readonly: true,\r\n            });\r\n\r\n            pane.addBinding(this, 'path_length', {\r\n                label: 'Path Length',\r\n                readonly: true,\r\n            });\r\n        }\r\n    },\r\n})\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AStarPathfinder.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AStarPathfinder.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./AStarPathfinder.vue?vue&type=template&id=6c628744&\"\nimport script from \"./AStarPathfinder.vue?vue&type=script&lang=ts&\"\nexport * from \"./AStarPathfinder.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./AStarPathfinder.vue?vue&type=style&index=0&id=6c628744&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_setupProxy","staticClass","on","handle_mousemove","handle_mouseup","$event","preventDefault","ref","_m","attrs","is_mobile","staticRenderFns","_v","AStarPathfinder","constructor","params","_defineProperty","find_neighbors","get_distance","minRange","maxRange","Error","min_range","max_range","open","Map","closed","neighbors","Set","reachable","result","forEach","value","key","set","path","static","score","find_all_in_range","start","prepare","origin","destination","undefined","create_node","size","closest","close_closest_open_node","all_option_callback","quit_early","maybe_queue_neighbors","Array","from","keys","filter","t","get","find_path","end","shortest_path","lowest","close_lowest_score_open_node","last_complexity","max_complexity","console","log","path_callback","add_neighbour","neighbor","add","cell","clear","to","length","is_valid_path","pathNode","pair","new_path","maybe_queue_neighbor","node","new_score","has","updating_node","delete","entries","reduce","a","b","color_scheme","background","free_cell","blocked_cell","start_cell","finish_cell","cell_gap_color","hovered_cell","path_color","visited_color","Cell","is_same","x","y","blocked","mixins","BaseComponent","extend","name","components","Canvas2D","Tweakpane","computed","props","category","String","seed","type","default","data","grid_size","blockiness","directional_bias","cells","allow_diagonal","visited_cells","path_length","mounted","canvas","$refs","isNaN","parseInt","Math","floor","random","pathfinder","bind","cell1","cell2","distance","sqrt","abs","global_direction","THREE","normalize","local_direction","direction_delta","pow","bias","lerp_float","update_path","debounce","setup_tweakpane","regenerate","beforeMount","methods","render_scene","for_each_cell","fill_color","draw_rect","width","height","stroke_color","alpha","rotation","PI","points","map","draw_line","line_width","update_canvas","viewport","user","scale","resize_canvas","fill_random_cells","seeded_random","set_random_start_finish_cells","for_each_cell_reverse","callback","_break","reset","update_random_generator","reset_user_transform","centrize","Alea","toString","e","coords","screen_to_viewport","offsetX","offsetY","button","pane","tweakpane","addBlade","view","addBinding","label","min","max","step","throttle","addButton","title","readonly","component"],"sourceRoot":""}