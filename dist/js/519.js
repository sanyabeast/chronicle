"use strict";(self["webpackChunkchronicle"]=self["webpackChunkchronicle"]||[]).push([[519],{4985:function(e,t,s){s.r(t),s.d(t,{default:function(){return y}});var i=function(){var e=this,t=e._self._c;e._self._setupProxy;return t("div",{staticClass:"a-star-pathfinder",on:{mousemove:e.handle_mousemove,mouseup:e.handle_mouseup,contextmenu:function(e){e.preventDefault()}}},[t("div",{staticClass:"control-panel"},[t("Tweakpane",{ref:"tweakpane"}),e._m(0)],1),t("Canvas2D",{ref:"canvas",attrs:{show_debug:!e.is_mobile,allow_user_scale:!0,allow_user_translate:!0,allow_context_menu:!0},on:{update:e.render}},[t("viewport",{attrs:{width:"10",height:"10"}},[t("rect",{attrs:{x:"1",y:"1",width:"2",height:"2"}})])],1)],1)},l=[function(){var e=this,t=e._self._c;e._self._setupProxy;return t("ul",{staticClass:"info"},[t("li",[t("i",[e._v("Left")]),e._v(" mouse button - set "),t("b",{attrs:{color:"#"}},[e._v("start")])]),t("li",[t("i",[e._v("Right")]),e._v(" mouse button - set finish")]),t("li",[t("i",[e._v("Middle")]),e._v(" mouse button - toggle cell")])])}],h=s(7327),a=s(1114),r=s(8913),n=s(77),o=s(7581),c=s(4026),d=s(4806);class _{constructor(e){(0,h.Z)(this,"min_range",void 0),(0,h.Z)(this,"max_range",void 0),(0,h.Z)(this,"open",void 0),(0,h.Z)(this,"closed",void 0),(0,h.Z)(this,"neighbors",void 0),(0,h.Z)(this,"origin",void 0),(0,h.Z)(this,"destination",void 0),(0,h.Z)(this,"last_complexity",0),(0,h.Z)(this,"max_complexity",256);let{find_neighbors:t,get_distance:s,minRange:i,maxRange:l}=e;if(!t)throw new Error("find_neighbors is required");this.find_neighbors=t,s&&(this.get_distance=s),this.min_range=i||0,this.max_range=l||0,this.open=new Map,this.closed=new Map,this.neighbors=new Set}get reachable(){const e=new Map;return this.closed.forEach(((t,s)=>{e.set(s,t.path)})),e}static create_node(e=[],t=0){return{score:t,path:e}}find_all_in_range(e){this.prepare(),this.origin=e,this.destination=void 0,this.open.set(e,_.create_node([e]));while(this.open.size>0){const e=this.close_closest_open_node();if(e&&e[1].score>=this.min_range&&(0===this.max_range||e[1].score<=this.max_range)&&this.all_option_callback(e[0]),this.quit_early(e[0]))break;this.maybe_queue_neighbors(e)}return this.min_range>0?Array.from(this.closed.keys()).filter((e=>this.closed.get(e).score>=this.min_range&&(0===this.max_range||this.closed.get(e).score<=this.max_range))):this.closed.keys()}find_path(e,t){this.prepare(),this.origin=e,this.destination=t,this.open.set(e,_.create_node([e]));let s=null;while(this.open.size>0){const e=this.close_lowest_score_open_node();if(e&&(e[0]===t||this.quit_early(e[0]))){s=e;break}if(this.last_complexity++,this.last_complexity>this.max_complexity){console.log(`Max complexity reached: ${this.last_complexity}`);break}this.maybe_queue_neighbors(e)}return s&&s[1]?(s[1].path.forEach((e=>{this.path_callback(e,s[1].path)})),s[1].path):(console.log(`No path between ${e} and ${t}`),null)}add_neighbour(e){this.neighbors.add(e)}find_neighbors(e,t){throw new Error("Not implemented")}prepare(){this.last_complexity=0,this.open.clear(),this.closed.clear()}get_distance(e,t,s){return s?s.length:0}quit_early(e){return!1}is_valid_path(e){return!0}path_callback(e,t){}all_option_callback(e){}maybe_queue_neighbors(e){this.find_neighbors(e[0],this.neighbors),this.neighbors.forEach((t=>{const s=[...e[1].path,t];this.maybe_queue_neighbor(e[1],s,t)})),this.neighbors.clear()}maybe_queue_neighbor(e,t,s){if(!this.is_valid_path(s))return;let i=this.get_distance(this.origin,s,t);if(this.destination&&(i+=this.get_distance(s,this.destination,null)),!(0!==this.max_range&&i>this.max_range))if(this.open.has(s)||this.closed.has(s)){if(this.open.has(s)&&i<this.open.get(s).score){const e=this.open.get(s);return e.path=t,void(e.score=i)}if(this.closed.has(s)&&i<this.closed.get(s).score){const e=this.closed.get(s);return e.path=t,e.score=i,this.open.set(s,e),void this.closed.delete(s)}}else this.open.set(s,_.create_node(t,i))}close_lowest_score_open_node(){if(0===this.open.size)return null;let e=Array.from(this.open.entries()).reduce(((e,t)=>e[1].score<t[1].score?e:t));return this.open.delete(e[0]),this.closed.set(e[0],e[1]),e}close_closest_open_node(){if(0===this.open.size)return null;let e=Array.from(this.open.entries()).reduce(((e,t)=>e[1].path.length<t[1].path.length?e:t));return this.open.delete(e[0]),this.closed.set(e[0],e[1]),e}}var p=s(7471),g=s.n(p),f=s(3889);const u={background:"#111111",free_cell:"#c0c0c0",blocked_cell:"#474747",start_cell:"#03a9f4",finish_cell:"#9c27b0",cell_gap_color:"#2A3439",hovered_cell:"#87CEEB",path_color:"#ffeb3b",visited_color:"#f44336"};class b{is_same(e){return this.x==e.x&&this.y==e.y}constructor(e,t,s){(0,h.Z)(this,"x",void 0),(0,h.Z)(this,"y",void 0),(0,h.Z)(this,"blocked",void 0),this.x=e,this.y=t,this.blocked=s}}var m=(0,o.Z)(c.Z).extend({name:"AStarDemo",components:{Canvas2D:r.Z,Tweakpane:n.Z},computed:{},props:{category:String,seed:{type:String,default:0}},data(){return{grid_size:16,blockiness:.25,directional_bias:.5,cells:[],allow_diagonal:!0,visited_cells:[],path_length:0,hovered_cell:{x:-1,y:-1},start_cell:{x:-1,y:-1},finish_cell:{x:-1,y:-1}}},mounted(){this.canvas=this.$refs.canvas,isNaN(parseInt(this.seed))?(console.log("seed: random"),this.seed=Math.floor(1e4*Math.random())):(console.log(`seed not random: ${this.seed}`),this.seed=parseInt(this.seed)),this.pathfinder=new _({find_neighbors:this.find_neighbors.bind(this),get_distance:(e,t)=>{let s=Math.sqrt(Math.abs(e.x-t.x)+Math.abs(e.y-t.y)),i=new a.FM8(this.finish_cell.x-this.start_cell.x,this.finish_cell.y-this.start_cell.y).normalize(),l=new a.FM8(t.x-e.x,t.y-e.y).normalize(),h=Math.abs(i.x-l.x)+Math.abs(i.y-l.y);h=Math.pow(h,2);let r=(0,f.f)(1,h,this.directional_bias);return r=Math.pow(r,4),s*=r,s}}),this.update_path=(0,d.debounce)(this.update_path,1e3/30),this.setup_tweakpane(),this.regenerate(),this.render()},beforeMount(){},methods:{find_neighbors(e,t){let s=e.x,i=e.y;this.allow_diagonal&&(s>0&&i>0&&!this.cells[i-1][s-1].blocked&&!this.cells[i][s-1].blocked&&!this.cells[i-1][s].blocked&&t.add(this.cells[i-1][s-1]),s<this.grid_size-1&&i>0&&!this.cells[i-1][s+1].blocked&&!this.cells[i][s+1].blocked&&!this.cells[i-1][s].blocked&&t.add(this.cells[i-1][s+1]),s>0&&i<this.grid_size-1&&!this.cells[i+1][s-1].blocked&&!this.cells[i][s-1].blocked&&!this.cells[i+1][s].blocked&&t.add(this.cells[i+1][s-1]),s<this.grid_size-1&&i<this.grid_size-1&&!this.cells[i+1][s+1].blocked&&!this.cells[i][s+1].blocked&&!this.cells[i+1][s].blocked&&t.add(this.cells[i+1][s+1])),s>0&&!this.cells[i][s-1].blocked&&t.add(this.cells[i][s-1]),s<this.grid_size-1&&!this.cells[i][s+1].blocked&&t.add(this.cells[i][s+1]),i>0&&!this.cells[i-1][s].blocked&&t.add(this.cells[i-1][s]),i<this.grid_size-1&&!this.cells[i+1][s].blocked&&t.add(this.cells[i+1][s]),this.visited_cells=[...this.visited_cells,...t]},render(){this.canvas&&(this.canvas.clear(u.background),this.render_scene(),this.canvas.render())},render_scene(){if(this.for_each_cell((e=>{let t=e.x,s=e.y,i=u.free_cell;this.cells[s][t].blocked&&(i=u.blocked_cell),this.canvas.draw_rect({x:t,y:s,width:1,height:1,fill_color:i,stroke_color:u.cell_gap_color}),this.start_cell&&this.start_cell.x==t&&this.start_cell.y==s&&this.canvas.draw_rect({x:t+.1,y:s+.1,width:.8,height:.8,fill_color:u.start_cell,alpha:1,rotation:Math.PI/4}),this.finish_cell&&this.finish_cell.x==t&&this.finish_cell.y==s&&this.canvas.draw_rect({x:t+.1,y:s+.1,width:.8,height:.8,fill_color:u.finish_cell,alpha:1}),!this.cells[s][t].blocked&&this.hovered_cell&&this.hovered_cell.x==t&&this.hovered_cell.y==s&&this.canvas.draw_rect({x:t,y:s,width:1,height:1,fill_color:u.hovered_cell,alpha:.3})})),this.visited_cells.forEach((e=>{let t=e.x,s=e.y;this.canvas.draw_rect({x:t,y:s,width:1,height:1,fill_color:u.visited_color,alpha:.075})})),this.path){let e=(0,d.map)(this.path,(e=>({x:e.x+.5,y:e.y+.5})));this.canvas.draw_line({points:e,stroke_color:u.path_color,line_width:.05,alpha:1})}},update_canvas(){this.canvas.viewport.width=this.grid_size,this.canvas.viewport.height=this.grid_size,this.canvas.user.scale=1,this.canvas.resize_canvas()},fill_random_cells(){for(let e=0;e<this.grid_size;e++){this.cells[e]=[];for(let t=0;t<this.grid_size;t++)this.seeded_random()<this.blockiness?this.cells[e][t]=new b(t,e,!0):this.cells[e][t]=new b(t,e,!1)}},set_random_start_finish_cells(){this.for_each_cell((e=>!e.blocked&&this.seeded_random()<.25&&(this.start_cell=e,!0))),this.for_each_cell_reverse((e=>!e.blocked&&this.seeded_random()<.25&&(this.finish_cell=e,!0))),this.update_path()},for_each_cell(e){let t=!1;for(let s=0;s<this.grid_size;s++){for(let i=0;i<this.grid_size;i++)if(e(this.cells[s][i])){t=!0;break}if(t)break}},for_each_cell_reverse(e){let t=!1;for(let s=this.grid_size-1;s>=0;s--){for(let i=this.grid_size-1;i>=0;i--)if(e(this.cells[s][i])){t=!0;break}if(t)break}},regenerate(){this.reset(),this.update_random_generator(),this.fill_random_cells(),this.set_random_start_finish_cells(),this.canvas.reset_user_transform(),this.update_canvas(),this.canvas.centrize()},update_random_generator(){this.seeded_random=g()(this.seed.toString())},update_path(){if(this.visited_cells=[],this.start_cell&&this.finish_cell){let e=this.pathfinder.find_path(this.start_cell,this.finish_cell);this.path=e}else this.path=null;this.path_length=this.path?this.path.length:0,this.render()},handle_mousemove(e){if(this.canvas){let t=this.canvas.screen_to_viewport({x:e.offsetX,y:e.offsetY}),s=Math.floor(t.x),i=Math.floor(t.y);if(this.cells[i]&&this.cells[i][s]){let e=this.cells[i][s];e.blocked?this.hovered_cell=null:this.hovered_cell=e,this.render()}}},handle_mouseup(e){let t=this.canvas.screen_to_viewport({x:e.offsetX,y:e.offsetY}),s=Math.floor(t.x),i=Math.floor(t.y);if(!(s<0||s>=this.grid_size||i<0||i>=this.grid_size)){switch(e.button){case 0:this.cells[i][s].blocked||(this.start_cell=this.cells[i][s]);break;case 1:this.cells[i][s].blocked=!this.cells[i][s].blocked;break;case 2:this.cells[i][s].blocked||(this.finish_cell=this.cells[i][s]);break}this.start_cell&&this.start_cell.is_same(this.finish_cell)&&(this.finish_cell=null),this.update_path()}},reset(){this.start_cell=null,this.finish_cell=null,this.path=null},setup_tweakpane(){let e=this.$refs.tweakpane.pane;e.addBlade({view:"separator"}),e.addBinding(this,"grid_size",{label:"Grid Size",min:2,max:32,step:1}).on("change",(0,d.throttle)((()=>{this.regenerate(),this.render()}),1e3/60)),e.addBinding(this,"blockiness",{label:"Blockiness",min:0,max:1,step:.01}).on("change",(0,d.throttle)((()=>{this.regenerate(),this.render()}),1e3/60)),e.addBinding(this,"directional_bias",{label:"Directional Bias",min:0,max:1,step:.01}).on("change",(0,d.throttle)((()=>{this.update_path(),this.render()}),1e3/60)),e.addBinding(this.pathfinder,"max_complexity",{label:"Max Complexity",min:0,max:512,step:.01}).on("change",(0,d.throttle)((()=>{this.update_path(),this.render()}),1e3/60)),e.addBinding(this,"allow_diagonal",{label:"Allow Diagonal"}).on("change",(0,d.throttle)((()=>{this.update_path(),this.render()}),1e3/60)),e.addButton({title:"Set Random Start/Finish"}).on("click",(()=>{this.set_random_start_finish_cells(),this.render()})),e.addBlade({view:"separator"}),e.addBinding(this,"seed",{label:"Seed",min:0,max:1e4,step:1}).on("change",(0,d.throttle)((()=>{this.regenerate(),this.render()}),1e3/15)),e.addButton({title:"Random Seed"}).on("click",(()=>{this.seed=Math.floor(1e4*Math.random()),this.regenerate(),this.canvas.render()})),e.addBlade({view:"separator"}),e.addButton({title:"Reset Viewport"}).on("click",(()=>{this.canvas.reset_user_transform(),this.canvas.centrize()})),e.addBinding(this.pathfinder,"last_complexity",{label:"Complexity",readonly:!0}),e.addBinding(this,"path_length",{label:"Path Length",readonly:!0})}}}),v=m,x=s(1001),k=(0,x.Z)(v,i,l,!1,null,null,null),y=k.exports}}]);
//# sourceMappingURL=519.js.map