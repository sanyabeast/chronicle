{"version":3,"file":"js/159.js","mappings":"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","sources":["webpack://chronicle/./src/views/applets/AStarPathfinder.vue","webpack://chronicle/./src/views/applets/AStar/AStar.ts","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?563c","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?372c","webpack://chronicle/./src/views/applets/AStarPathfinder.vue?5533"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"a-star-pathfinder\",on:{\"mousemove\":_vm.handle_mousemove,\"mousedown\":_vm.handle_mousedown,\"contextmenu\":function($event){$event.preventDefault();}}},[_c('div',{staticClass:\"control-panel\"},[_c('Tweakpane',{ref:\"tweakpane\"}),_vm._m(0)],1),_c('Canvas2D',{ref:\"canvas\",attrs:{\"show_debug\":!_vm.is_mobile,\"allow_user_scale\":true,\"allow_user_translate\":true,\"allow_context_menu\":true},on:{\"update\":_vm.render}},[_c('viewport',{attrs:{\"width\":\"10\",\"height\":\"10\"}},[_c('rect',{attrs:{\"x\":\"1\",\"y\":\"1\",\"width\":\"2\",\"height\":\"2\"}})])],1)],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('ul',{staticClass:\"info\"},[_c('li',[_c('i',[_vm._v(\"Left\")]),_vm._v(\" mouse button - set \"),_c('b',{attrs:{\"color\":\"#\"}},[_vm._v(\"start\")])]),_c('li',[_c('i',[_vm._v(\"Right\")]),_vm._v(\" mouse button - set finish\")])])\n}]\n\nexport { render, staticRenderFns }","export type Node<T> = {\r\n    score: number;\r\n    path: T[];\r\n};\r\n\r\nexport type FFindNeighbors<T> = (cell: T, neighbors: Set<T>) => void;\r\n\r\nexport class AStarPathfinder<T> {\r\n    public minRange: number;\r\n    public maxRange: number;\r\n    protected open: Map<T, Node<T>>;\r\n    protected closed: Map<T, Node<T>>;\r\n    private neighbors: Set<T>;\r\n    private origin: T | undefined;\r\n    private destination: T | undefined;\r\n\r\n    constructor(find_neighbors: FFindNeighbors<T>, minRange: number = 0, maxRange: number = 0) {\r\n\r\n        this.find_neighbors = find_neighbors;\r\n        this.minRange = minRange;\r\n        this.maxRange = maxRange;\r\n        this.open = new Map<T, Node<T>>();\r\n        this.closed = new Map<T, Node<T>>();\r\n        this.neighbors = new Set<T>();\r\n    }\r\n\r\n    public get reachable(): Map<T, T[]> {\r\n        const result = new Map<T, T[]>();\r\n        this.closed.forEach((value, key) => {\r\n            result.set(key, value.path);\r\n        });\r\n        return result;\r\n    }\r\n\r\n    protected static createNode<T>(path: T[] = [], score: number = 0): Node<T> {\r\n        return { score, path };\r\n    }\r\n\r\n    public findAllInRange(start: T): Iterable<T> {\r\n        this.prepare();\r\n        this.origin = start;\r\n        this.destination = undefined;\r\n        this.open.set(start, AStarPathfinder.createNode([start]));\r\n\r\n        while (this.open.size > 0) {\r\n            const closest = this.closeClosestOpenNode();\r\n            if (closest && closest[1].score >= this.minRange && (this.maxRange === 0 || closest[1].score <= this.maxRange)) {\r\n                this.allOptionCallback(closest[0]);\r\n            }\r\n            if (this.quitEarly(closest[0])) {\r\n                break;\r\n            }\r\n            this.maybeQueueNeighbors(closest);\r\n        }\r\n\r\n        if (this.minRange > 0) {\r\n            return Array.from(this.closed.keys()).filter(t => this.closed.get(t)!.score >= this.minRange && (this.maxRange === 0 || this.closed.get(t)!.score <= this.maxRange));\r\n        }\r\n        return this.closed.keys();\r\n    }\r\n\r\n    public find_path(start: T, end: T): T[] | null {\r\n        this.prepare();\r\n        this.origin = start;\r\n        this.destination = end;\r\n        this.open.set(start, AStarPathfinder.createNode([start]));\r\n\r\n        let shortestPath: [T, Node<T>] | null = null;\r\n        while (this.open.size > 0) {\r\n            const lowest = this.closeLowestScoreOpenNode();\r\n            if (lowest && (lowest[0] === end || this.quitEarly(lowest[0]))) {\r\n                shortestPath = lowest;\r\n                break;\r\n            }\r\n            this.maybeQueueNeighbors(lowest);\r\n        }\r\n\r\n        if (!shortestPath || !shortestPath[1]) {\r\n            console.log(`No path between ${start} and ${end}`);\r\n            return null;\r\n        }\r\n\r\n        shortestPath[1].path.forEach(t => {\r\n            this.pathCallback(t, shortestPath[1].path);\r\n        });\r\n\r\n        return shortestPath[1].path;\r\n    }\r\n\r\n    protected addNeighbor(neighbor: T): void {\r\n        this.neighbors.add(neighbor);\r\n    }\r\n\r\n    protected find_neighbors(cell: T, neighbors: Set<T>): void {\r\n        throw new Error(\"Not implemented\");\r\n    };\r\n\r\n    protected prepare(): void {\r\n        this.open.clear();\r\n        this.closed.clear();\r\n    }\r\n\r\n    protected get_distance(from: T, to: T, path: T[] | null): number {\r\n        return path ? path.length : 0;\r\n    }\r\n\r\n    protected quitEarly(cell: T): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected is_valid_path(cell: T): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected pathCallback(pathNode: T, path: T[]): void { }\r\n\r\n    protected allOptionCallback(pathNode: T): void { }\r\n\r\n    private maybeQueueNeighbors(pair: [T, Node<T>]): void {\r\n        this.find_neighbors(pair[0], this.neighbors);\r\n        this.neighbors.forEach(neighbor => {\r\n            const newPath = [...pair[1].path, neighbor];\r\n            this.maybeQueueNeighbor(pair[1], newPath, neighbor);\r\n        });\r\n        this.neighbors.clear();\r\n    }\r\n\r\n    private maybeQueueNeighbor(node: Node<T>, newPath: T[], neighbor: T): void {\r\n        if (!this.is_valid_path(neighbor)) {\r\n            return;\r\n        }\r\n\r\n        let newScore = this.get_distance(this.origin!, neighbor, newPath);\r\n        if (this.destination) {\r\n            newScore += this.get_distance(neighbor, this.destination, null);\r\n        }\r\n\r\n        if (this.maxRange !== 0 && newScore > this.maxRange) {\r\n            return;\r\n        }\r\n\r\n        if (!this.open.has(neighbor) && !this.closed.has(neighbor)) {\r\n            this.open.set(neighbor, AStarPathfinder.createNode(newPath, newScore));\r\n            return;\r\n        }\r\n\r\n        if (this.open.has(neighbor) && newScore < this.open.get(neighbor)!.score) {\r\n            const updatingNode = this.open.get(neighbor)!;\r\n            updatingNode.path = newPath;\r\n            updatingNode.score = newScore;\r\n            return;\r\n        }\r\n\r\n        if (this.closed.has(neighbor) && newScore < this.closed.get(neighbor)!.score) {\r\n            const updatingNode = this.closed.get(neighbor)!;\r\n            updatingNode.path = newPath;\r\n            updatingNode.score = newScore;\r\n            this.open.set(neighbor, updatingNode);\r\n            this.closed.delete(neighbor);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private closeLowestScoreOpenNode(): [T, Node<T>] | null {\r\n        if (this.open.size === 0) {\r\n            return null;\r\n        }\r\n        let lowest = Array.from(this.open.entries()).reduce((a, b) => a[1].score < b[1].score ? a : b);\r\n        this.open.delete(lowest[0]);\r\n        this.closed.set(lowest[0], lowest[1]);\r\n        return lowest;\r\n    }\r\n\r\n    private closeClosestOpenNode(): [T, Node<T>] | null {\r\n        if (this.open.size === 0) {\r\n            return null;\r\n        }\r\n        let closest = Array.from(this.open.entries()).reduce((a, b) => a[1].path.length < b[1].path.length ? a : b);\r\n        this.open.delete(closest[0]);\r\n        this.closed.set(closest[0], closest[1]);\r\n        return closest;\r\n    }\r\n}","\r\n\r\nimport Vue from 'vue';\r\nimport Canvas2D from '@/components/Canvas2D.vue';\r\nimport Tweakpane from '@/components/Tweakpane.vue';\r\nimport mixins from 'vue-typed-mixins'\r\nimport BaseComponent from '@/components/BaseComponent.vue';\r\nimport { fill, map, throttle } from 'lodash';\r\nimport Syntax from '@/components/Syntax.vue';\r\nimport { AStarPathfinder } from './AStar/AStar';\r\nimport Alea from 'alea'\r\n\r\nconst color_scheme = {\r\n    background: \"#2E2E3A\",     // Dark Slate Gray for a modern, sleek background\r\n    free_cell: \"#A3B1C6\",      // Light Steel Blue for unoccupied cells, providing a soft contrast\r\n    blocked_cell: \"#6A7485\",   // Cadet Blue for blocked cells, blending well but distinguishable\r\n    start_cell: \"#76B947\",     // Olive Drab for the start cell, indicating 'go' or 'start'\r\n    finish_cell: \"#D85E47\",    // Sienna for the finish cell, signaling 'stop' or 'end'\r\n    cell_gap_color: \"#404455\", // Darker Gray for gaps between cells, for a subtle boundary\r\n    hovered_cell: \"#31A2AC\",   // Turquoise for hovered cells, standing out but not overpowering\r\n    path_color: \"#FFAA22\"      // Golden Rod for the path, bright and attention-grabbing\r\n};\r\nclass Cell {\r\n    x: number;\r\n    y: number;\r\n    blocked: boolean;\r\n    is_same(cell: Cell) {\r\n        return this.x == cell.x && this.y == cell.y\r\n    }\r\n    constructor(x: number, y: number, blocked: boolean) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.blocked = blocked;\r\n    }\r\n}\r\n\r\nexport default mixins(BaseComponent).extend({\r\n    name: \"AStarDemo\",\r\n    components: { Canvas2D, Tweakpane },\r\n    mounted() {\r\n        this.canvas = this.$refs.canvas;\r\n        this.pathfinder = new AStarPathfinder<Cell>(this.find_neighbors.bind(this))\r\n        this.setup_tweakpane()\r\n        this.regenerate()\r\n        this.render()\r\n    },\r\n    beforeMount() { },\r\n    methods: {\r\n        find_neighbors(cell: Cell, neighbors: Set<Cell>) {\r\n            console.log(cell, neighbors)\r\n\r\n            let x = cell.x\r\n            let y = cell.y\r\n\r\n            if (x > 0 && !this.cells[y][x - 1].blocked) {\r\n                neighbors.add(this.cells[y][x - 1])\r\n            }\r\n\r\n            if (x < this.grid_size - 1 && !this.cells[y][x + 1].blocked) {\r\n                neighbors.add(this.cells[y][x + 1])\r\n            }\r\n\r\n            if (y > 0 && !this.cells[y - 1][x].blocked) {\r\n                neighbors.add(this.cells[y - 1][x])\r\n            }\r\n\r\n            if (y < this.grid_size - 1 && !this.cells[y + 1][x].blocked) {\r\n                neighbors.add(this.cells[y + 1][x])\r\n            }\r\n\r\n            if (this.allow_diagonal) {\r\n                if (x > 0 && y > 0 && !this.cells[y - 1][x - 1].blocked) {\r\n                    neighbors.add(this.cells[y - 1][x - 1])\r\n                }\r\n\r\n                if (x < this.grid_size - 1 && y > 0 && !this.cells[y - 1][x + 1].blocked) {\r\n                    neighbors.add(this.cells[y - 1][x + 1])\r\n                }\r\n\r\n                if (x > 0 && y < this.grid_size - 1 && !this.cells[y + 1][x - 1].blocked) {\r\n                    neighbors.add(this.cells[y + 1][x - 1])\r\n                }\r\n\r\n                if (x < this.grid_size - 1 && y < this.grid_size - 1 && !this.cells[y + 1][x + 1].blocked) {\r\n                    neighbors.add(this.cells[y + 1][x + 1])\r\n                }\r\n            }\r\n        },\r\n        render() {\r\n            if (this.canvas) {\r\n                this.canvas.clear(color_scheme.background)\r\n                this.render_scene()\r\n                this.canvas.render()\r\n            }\r\n        },\r\n        render_scene() {\r\n            // rendering cells\r\n            for (let y = 0; y < this.grid_size; y++) {\r\n                for (let x = 0; x < this.grid_size; x++) {\r\n                    let fill_color = color_scheme.free_cell\r\n                    if (this.cells[y][x].blocked) {\r\n                        fill_color = color_scheme.blocked_cell\r\n                    }\r\n\r\n                    this.canvas.draw_rect({ x, y, width: 1, height: 1, fill_color, stroke_color: color_scheme.cell_gap_color })\r\n\r\n                    if (this.start_cell && this.start_cell.x == x && this.start_cell.y == y) {\r\n                        this.canvas.draw_rect({ x: x + 0.1, y: y + 0.1, width: 0.8, height: 0.8, fill_color: color_scheme.start_cell, alpha: 0.5 })\r\n                    }\r\n\r\n                    if (this.finish_cell && this.finish_cell.x == x && this.finish_cell.y == y) {\r\n                        this.canvas.draw_rect({ x: x + 0.1, y: y + 0.1, width: 0.8, height: 0.8, fill_color: color_scheme.finish_cell })\r\n                    }\r\n\r\n                    if (!this.cells[y][x].blocked && this.hovered_cell && this.hovered_cell.x == x && this.hovered_cell.y == y) {\r\n                        this.canvas.draw_rect({ x, y, width: 1, height: 1, fill_color: color_scheme.hovered_cell, alpha: 0.3 })\r\n                    }\r\n                }\r\n            }\r\n\r\n            //  rendering path\r\n            if (this.path) {\r\n                this.canvas.draw_line({\r\n                    points: map(this.path, (cell) => {\r\n                        return { x: cell.x + 0.5, y: cell.y + 0.5 }\r\n                    }), stroke_color: color_scheme.path_color, line_width: 0.03, alpha: 1\r\n                })\r\n            }\r\n\r\n        },\r\n        update_canvas() {\r\n            this.canvas.viewport.width = this.grid_size;\r\n            this.canvas.viewport.height = this.grid_size;\r\n            this.canvas.user.scale = 1;\r\n            this.canvas.resize_canvas();\r\n        },\r\n        fill_random_cells() {\r\n            for (let y = 0; y < this.grid_size; y++) {\r\n                this.cells[y] = [];\r\n                for (let x = 0; x < this.grid_size; x++) {\r\n                    if (this.seeded_random() < this.blockiness) {\r\n                        this.cells[y][x] = new Cell(x, y, true);\r\n                    } else {\r\n                        this.cells[y][x] = new Cell(x, y, false);\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        regenerate() {\r\n            this.reset()\r\n            this.update_random_generator()\r\n            this.fill_random_cells()\r\n            this.canvas.reset_user_transform()\r\n            this.update_canvas()\r\n            this.canvas.centrize()\r\n        },\r\n        update_random_generator() {\r\n            this.seeded_random = Alea(this.seed.toString())\r\n        },\r\n        update_path() {\r\n            if (this.start_cell && this.finish_cell) {\r\n                let path = this.pathfinder.find_path(this.start_cell, this.finish_cell)\r\n                this.path = path\r\n                console.log(path)\r\n            }\r\n        },\r\n        handle_mousemove(e: MouseEvent) {\r\n            if (this.canvas) {\r\n                let coords = this.canvas.screen_to_viewport({ x: e.offsetX, y: e.offsetY })\r\n                let x = Math.floor(coords.x)\r\n                let y = Math.floor(coords.y)\r\n\r\n                this.hovered_cell.x = x\r\n                this.hovered_cell.y = y\r\n\r\n                this.render()\r\n            }\r\n        },\r\n        handle_mousedown(e: MouseEvent) {\r\n            let coords = this.canvas.screen_to_viewport({ x: e.offsetX, y: e.offsetY })\r\n            let x = Math.floor(coords.x)\r\n            let y = Math.floor(coords.y)\r\n\r\n            if (x < 0 || x >= this.grid_size || y < 0 || y >= this.grid_size) {\r\n                return\r\n            }\r\n\r\n            if (!this.cells[y][x].blocked) {\r\n                switch (e.button) {\r\n                    case 0:\r\n                        this.start_cell = this.cells[y][x]\r\n                        break;\r\n                    case 2:\r\n                        this.finish_cell = this.cells[y][x]\r\n                        break;\r\n                }\r\n\r\n                this.update_path()\r\n            }\r\n\r\n            console.log(e)\r\n        },\r\n        reset() {\r\n            this.start_cell = null\r\n            this.finish_cell = null\r\n            this.path = null\r\n        },\r\n        setup_tweakpane() {\r\n            let pane = this.$refs.tweakpane.pane;\r\n\r\n            pane.addBlade({\r\n                view: 'separator',\r\n            });\r\n\r\n            pane.addBinding(this, 'grid_size', {\r\n                label: 'Grid Size',\r\n                min: 2,\r\n                max: 20,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            pane.addBinding(this, 'blockiness', {\r\n                label: 'Blockiness',\r\n                min: 0,\r\n                max: 1,\r\n                step: 0.01,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            pane.addBinding(this, 'allow_diagonal', {\r\n                label: 'Allow Diagonal',\r\n            }).on('change', throttle(() => {\r\n                this.update_path()\r\n                this.render()\r\n            }, 1000 / 60));\r\n\r\n            pane.addBinding(this, 'seed', {\r\n                label: 'Seed',\r\n                min: 0,\r\n                max: 10000,\r\n                step: 1,\r\n            }).on('change', throttle(() => {\r\n                this.regenerate()\r\n                this.render()\r\n            }, 1000 / 15));\r\n\r\n            pane.addButton({\r\n                title: 'Reset Viewport',\r\n            }).on('click', () => {\r\n                this.canvas.reset_user_transform()\r\n            });\r\n\r\n        }\r\n    },\r\n    computed: {},\r\n    props: {\r\n        category: String\r\n    },\r\n    data() {\r\n        return {\r\n            grid_size: 10,\r\n            blockiness: 0.25,\r\n            cells: [],\r\n            seed: 404,\r\n            allow_diagonal: false,\r\n            hovered_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n            start_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n            finish_cell: {\r\n                x: -1,\r\n                y: -1\r\n            },\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AStarPathfinder.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??clonedRuleSet-41.use[2]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./AStarPathfinder.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./AStarPathfinder.vue?vue&type=template&id=9cd8b5ae&\"\nimport script from \"./AStarPathfinder.vue?vue&type=script&lang=ts&\"\nexport * from \"./AStarPathfinder.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./AStarPathfinder.vue?vue&type=style&index=0&id=9cd8b5ae&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_setupProxy","staticClass","on","handle_mousemove","handle_mousedown","$event","preventDefault","ref","_m","attrs","is_mobile","staticRenderFns","_v","AStarPathfinder","constructor","find_neighbors","minRange","maxRange","_defineProperty","open","Map","closed","neighbors","Set","reachable","result","forEach","value","key","set","path","static","score","findAllInRange","start","prepare","origin","destination","undefined","createNode","size","closest","closeClosestOpenNode","allOptionCallback","quitEarly","maybeQueueNeighbors","Array","from","keys","filter","t","get","find_path","end","shortestPath","lowest","closeLowestScoreOpenNode","pathCallback","console","log","addNeighbor","neighbor","add","cell","Error","clear","get_distance","to","length","is_valid_path","pathNode","pair","newPath","maybeQueueNeighbor","node","newScore","has","updatingNode","delete","entries","reduce","a","b","color_scheme","background","free_cell","blocked_cell","start_cell","finish_cell","cell_gap_color","hovered_cell","path_color","Cell","is_same","x","y","blocked","mixins","BaseComponent","extend","name","components","Canvas2D","Tweakpane","mounted","canvas","$refs","pathfinder","bind","setup_tweakpane","regenerate","beforeMount","methods","cells","grid_size","allow_diagonal","render_scene","fill_color","draw_rect","width","height","stroke_color","alpha","draw_line","points","map","line_width","update_canvas","viewport","user","scale","resize_canvas","fill_random_cells","seeded_random","blockiness","reset","update_random_generator","reset_user_transform","centrize","Alea","seed","toString","update_path","e","coords","screen_to_viewport","offsetX","offsetY","Math","floor","button","pane","tweakpane","addBlade","view","addBinding","label","min","max","step","throttle","addButton","title","computed","props","category","String","data","component"],"sourceRoot":""}