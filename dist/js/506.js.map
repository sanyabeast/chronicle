{"version":3,"file":"js/506.js","mappings":"kKAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAUF,EAAIG,MAAMC,YAAY,OAAOF,EAAG,MAAM,CAACG,YAAY,cAAcC,MAAM,CAAEC,OAAQP,EAAIQ,WAAYC,GAAG,CAAC,UAAYT,EAAIU,mBAAmB,CAACR,EAAG,gBAAgB,CAACS,IAAI,iBAAiBC,MAAM,CAAC,YAAcZ,EAAIa,YAAY,aAAeb,EAAIc,aAAa,oBAAsBd,EAAIe,oBAAoB,cAAgBf,EAAIgB,kBAAkB,EAC9Y,EACIC,EAAkB,G,4DCmBtB,GAAAC,EAAAA,EAAAA,GAAAC,EAAAA,GAAAC,OAAA,CACAC,KAAA,aACAC,WAAA,CACAC,cAAAA,EAAAA,YAEAC,OACA,OACAT,oBAAA,2BACAU,UAAA,CACAC,EAAA,EACAC,EAAA,GAGA,EACAC,SAAA,CACAC,WACA,YAAAC,MAAAC,cACA,GAEAC,MAAA,CACAC,UAAA,CACAC,KAAAC,OACAC,QAAA,UAEAvB,YAAA,CACAqB,KAAAG,OACAD,QAAA,GAEAtB,aAAA,CACAoB,KAAAG,OACAD,QAAA,GAEApB,cAAA,CACAkB,KAAAI,QACAF,SAAA,IAGAG,UACAC,QAAAC,IAAA,uCAAAR,WACA,KAAAS,MAEA,EACAC,QAAA,CACAC,UAAAC,GACA,KAAAC,MAAAC,SAAAC,SAAAC,OAAAC,OAAA,EAAAL,EACA,KAAAC,MAAAC,SAAAC,SAAAG,aAAAD,MAAAxB,EAAA,KAAAI,MAAAC,eAAAqB,MACA,KAAAN,MAAAC,SAAAC,SAAAG,aAAAD,MAAAvB,EAAA,KAAAG,MAAAC,eAAAsB,OACA,KAAAP,MAAAC,SAAAC,SAAAM,QAAAJ,MAAAxB,EAAA,KAAAD,UAAAC,EACA,KAAAoB,MAAAC,SAAAC,SAAAM,QAAAJ,MAAAvB,EAAA,KAAAF,UAAAE,CACA,EACA,aACA,IAAA4B,EAAAA,GAAA,KAAAtB,WACA,UAAAuB,MAAA,eAAAvB,uBAGA,IAAAwB,EAAA,IAAAC,EAAAA,IAAA,SACAX,EAAA,KAAAA,eAAAY,EAAAA,EAAAA,IAAAJ,EAAAA,GAAA,KAAAtB,WAAA,CACAgB,OAAA,EACAE,aAAA,MACAG,QAAA,QAGAR,EAAA,KAAAA,MAAA,IAAAY,EAAAA,IAAAD,EAAAV,GACA,KAAAjB,MAAAC,eAAA6B,MAAAC,IAAAf,GACA,KAAAhB,MAAAC,eAAAa,UAAA,KAAAA,UAEA,KAAAkB,MAAA,aACA,EACApD,iBAAAqD,GACA,KAAAtC,UAAAC,EAAAqC,EAAAC,QAAA,KAAAlC,MAAAC,eAAAqB,MACA,KAAA3B,UAAAE,EAAAoC,EAAAE,QAAA,KAAAnC,MAAAC,eAAAsB,MACA,KC5FmQ,I,UCQ/Pa,GAAY,OACd,EACAnE,EACAkB,GACA,EACA,KACA,KACA,MAIF,EAAeiD,EAAiB,O","sources":["webpack://chronicle/./src/views/applets/ShaderView.vue","webpack://chronicle/src/views/applets/ShaderView.vue","webpack://chronicle/./src/views/applets/ShaderView.vue?2b19","webpack://chronicle/./src/views/applets/ShaderView.vue?2875"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c,_setup=_vm._self._setupProxy;return _c('div',{staticClass:\"shader-view\",class:{ mobile: _vm.is_mobile },on:{\"mousemove\":_vm.handle_mousemove}},[_c('ThreeRenderer',{ref:\"three_renderer\",attrs:{\"force_width\":_vm.force_width,\"force_height\":_vm.force_height,\"download_image_name\":_vm.download_image_name,\"show_controls\":_vm.show_controls}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div :class=\"{ mobile: is_mobile }\" class=\"shader-view\" @mousemove=\"handle_mousemove\">\r\n        <ThreeRenderer :force_width=\"force_width\" :force_height=\"force_height\" ref=\"three_renderer\"\r\n            :download_image_name=\"download_image_name\" :show_controls=\"show_controls\">\r\n        </ThreeRenderer>\r\n    </div>\r\n    <!-- Other components and UI elements -->\r\n</div></template>\r\n  \r\n<script >\r\n\r\nimport * as THREE from 'three';\r\nimport mixins from 'vue-typed-mixins'\r\nimport BaseComponent from '@/components/BaseComponent.vue';\r\nimport ThreeRenderer from '../../components/ThreeRenderer.vue';\r\n\r\nimport read_text_file from '@/tools';\r\nimport load_texture from '@/tools';\r\nimport { create_shader_material } from '@/tools';\r\nimport { shaders } from '@/router/index'\r\n\r\nexport default mixins(BaseComponent).extend({\r\n    name: 'ShaderView',\r\n    components: {\r\n        ThreeRenderer,\r\n    },\r\n    data() {\r\n        return {\r\n            download_image_name: 'rende@color-accent_frame',\r\n            mouse_pos: {\r\n                x: 0,\r\n                y: 0\r\n            },\r\n        };\r\n    },\r\n    computed: {\r\n        renderer(){\r\n            return this.$refs.three_renderer\r\n        }\r\n    },\r\n    props: {\r\n        shader_id: {\r\n            type: String,\r\n            default: 'sample'\r\n        },\r\n        force_width: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        force_height: {\r\n            type: Number,\r\n            default: 0,\r\n        },\r\n        show_controls: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n    },\r\n    mounted() {\r\n        console.log(\"ShaderView inited, using shader\", this.shader_id);\r\n        this.init()\r\n\r\n    },\r\n    methods: {\r\n        on_render(delta) {\r\n            this.plane.material.uniforms.u_time.value += 1.0 * delta;\r\n            this.plane.material.uniforms.u_resolution.value.x = this.$refs.three_renderer.width;\r\n            this.plane.material.uniforms.u_resolution.value.y = this.$refs.three_renderer.height;\r\n            this.plane.material.uniforms.u_mouse.value.x = this.mouse_pos.x;\r\n            this.plane.material.uniforms.u_mouse.value.y = this.mouse_pos.y;\r\n        },\r\n        async init() {\r\n            if (!shaders[this.shader_id]) {\r\n                throw new Error(`Shader ${this.shader_id} not found`)\r\n            }\r\n\r\n            let geometry = new THREE.PlaneGeometry(1, 1, 1, 1);\r\n            let material = this.material = await create_shader_material(shaders[this.shader_id], {\r\n                u_time: 0,\r\n                u_resolution: [0, 0],\r\n                u_mouse: [0, 0],\r\n            });\r\n\r\n            let plane = this.plane = new THREE.Mesh(geometry, material);\r\n            this.$refs.three_renderer.scene.add(plane);\r\n            this.$refs.three_renderer.on_render = this.on_render\r\n\r\n            this.$emit('ready', this)\r\n        },\r\n        handle_mousemove(event) {\r\n            this.mouse_pos.x = event.clientX / this.$refs.three_renderer.width;\r\n            this.mouse_pos.y = event.clientY / this.$refs.three_renderer.height;\r\n        }\r\n    },\r\n});\r\n</script>\r\n<style lang=\"less\">\r\n@import url('@/assets/index.less');\r\n\r\n.shader-view {\r\n    padding: 0;\r\n\r\n    .renderer_container {\r\n        width: 100%;\r\n        height: 100%;\r\n\r\n        .controls {\r\n            .separator {\r\n                height: 16px;\r\n                border-bottom: 4px solid @color-text;\r\n            }\r\n\r\n            .button {\r\n                box-sizing: border-box;\r\n\r\n                &.open-file {\r\n                    font-size:  @font-size-l;\r\n                }\r\n\r\n                &.toggle-grid,\r\n                &.toggle-tiling {\r\n                    &.active {\r\n                        color: @color-accent;\r\n                    }\r\n                }\r\n\r\n                &.mode {\r\n                    color: #555;\r\n\r\n                    &.active {\r\n                        color: @color-text;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShaderView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ShaderView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ShaderView.vue?vue&type=template&id=010fa5da&\"\nimport script from \"./ShaderView.vue?vue&type=script&lang=js&\"\nexport * from \"./ShaderView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ShaderView.vue?vue&type=style&index=0&id=010fa5da&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"names":["render","_vm","this","_c","_self","_setupProxy","staticClass","class","mobile","is_mobile","on","handle_mousemove","ref","attrs","force_width","force_height","download_image_name","show_controls","staticRenderFns","mixins","BaseComponent","extend","name","components","ThreeRenderer","data","mouse_pos","x","y","computed","renderer","$refs","three_renderer","props","shader_id","type","String","default","Number","Boolean","mounted","console","log","init","methods","on_render","delta","plane","material","uniforms","u_time","value","u_resolution","width","height","u_mouse","shaders","Error","geometry","THREE","create_shader_material","scene","add","$emit","event","clientX","clientY","component"],"sourceRoot":""}